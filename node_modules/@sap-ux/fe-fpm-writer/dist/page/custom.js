"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.generate = exports.getTemplateRoot = exports.enhanceData = void 0;
const path_1 = require("path");
const mem_fs_1 = require("mem-fs");
const mem_fs_editor_1 = require("mem-fs-editor");
const ejs_1 = require("ejs");
const common_1 = require("./common");
const defaults_1 = require("../common/defaults");
const validate_1 = require("../common/validate");
const templates_1 = require("../templates");
const semver_1 = require("semver");
const utils_1 = require("../common/utils");
const file_1 = require("../common/file");
/**
 * Enhances the provided custom page configuration with default data.
 *
 * @param data - a custom page configuration object
 * @param manifestPath - path to the application manifest
 * @param fs - mem-fs reference to be used for file access
 * @returns enhanced configuration
 */
function enhanceData(data, manifestPath, fs) {
    const manifest = fs.readJSON(manifestPath);
    // set common defaults
    const config = defaults_1.setCommonDefaults(data, manifestPath, manifest);
    // set FCL configuration
    const fclConfig = common_1.getFclConfig(manifest, config.navigation);
    config.fcl = fclConfig.fcl;
    config.controlAggregation = fclConfig.controlAggregation;
    if (config.view === undefined) {
        config.view = {
            title: config.name
        };
    }
    return config;
}
exports.enhanceData = enhanceData;
/**
 * Validate the UI5 version and if valid return the root folder for the templates to be used.
 *
 * @param ui5Version - optional minimum required UI5 version
 * @returns root folder  containg the templates if the version is supported otherwise throws an error
 */
function getTemplateRoot(ui5Version) {
    const minVersion = semver_1.coerce(ui5Version);
    if (!minVersion || minVersion.minor >= 94) {
        return templates_1.getTemplatePath('/page/custom/1.94');
    }
    else {
        return templates_1.getTemplatePath('/page/custom/1.84');
    }
}
exports.getTemplateRoot = getTemplateRoot;
/**
 * Add a custom page to an existing UI5 application.
 *
 * @param {string} basePath - the base path
 * @param {CustomPage} data - the custom page configuration
 * @param {Editor} [fs] - the memfs editor instance
 * @returns {Promise<Editor>} the updated memfs editor instance
 */
function generate(basePath, data, fs) {
    if (!fs) {
        fs = mem_fs_editor_1.create(mem_fs_1.create());
    }
    validate_1.validateVersion(data.minUI5Version);
    common_1.validatePageConfig(basePath, data, fs);
    const manifestPath = path_1.join(basePath, 'webapp/manifest.json');
    const config = enhanceData(data, manifestPath, fs);
    // merge content into existing files
    const root = getTemplateRoot(data.minUI5Version);
    // enhance manifest.json
    file_1.extendJSON(fs, {
        filepath: manifestPath,
        content: ejs_1.render(fs.read(path_1.join(root, `manifest.json`)), config, {}),
        replacer: common_1.getManifestJsonExtensionHelper(config),
        tabInfo: data.tabInfo
    });
    // add extension content
    const viewPath = path_1.join(config.path, `${config.name}.view.xml`);
    if (!fs.exists(viewPath)) {
        fs.copyTpl(path_1.join(root, 'ext/View.xml'), viewPath, config);
    }
    const ext = data.typescript ? 'ts' : 'js';
    const controllerPath = path_1.join(config.path, `${config.name}.controller.${ext}`);
    if (!fs.exists(controllerPath)) {
        fs.copyTpl(path_1.join(root, `ext/Controller.${ext}`), controllerPath, config);
    }
    if (data.typescript) {
        utils_1.addExtensionTypes(basePath, data.minUI5Version, fs);
    }
    return fs;
}
exports.generate = generate;
//# sourceMappingURL=custom.js.map