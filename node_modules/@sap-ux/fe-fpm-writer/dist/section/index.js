"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.generateCustomSection = exports.getManifestRoot = void 0;
const mem_fs_1 = require("mem-fs");
const mem_fs_editor_1 = require("mem-fs-editor");
const path_1 = require("path");
const ejs_1 = require("ejs");
const validate_1 = require("../common/validate");
const defaults_1 = require("../common/defaults");
const event_handler_1 = require("../common/event-handler");
const file_1 = require("../common/file");
const templates_1 = require("../templates");
const semver_1 = require("semver");
/**
 * Get the template folder for the given UI5 version.
 *
 * @param ui5Version required UI5 version.
 * @returns path to the template folder containing the manifest.json ejs template
 */
function getManifestRoot(ui5Version) {
    const minVersion = semver_1.coerce(ui5Version);
    if (!minVersion || minVersion.minor >= 86) {
        return templates_1.getTemplatePath('/section/1.86');
    }
    else {
        return templates_1.getTemplatePath('/section/1.85');
    }
}
exports.getManifestRoot = getManifestRoot;
/**
 * Get additional dependencies for fragment.xml template based on passed ui5 version.
 *
 * @param ui5Version required UI5 version.
 * @returns Additional dependencies for fragment.xml
 */
function getAdditionalDependencies(ui5Version) {
    const minVersion = semver_1.coerce(ui5Version);
    return !minVersion || minVersion.minor >= 90 ? { 'xmlns:macros': 'sap.fe.macros' } : undefined;
}
/**
 * Enhances the provided custom section configuration with additonal data.
 *
 * @param {Editor} fs - the mem-fs editor instance
 * @param {CustomSection} data - a custom section configuration object
 * @param {string} manifestPath - path to the project's manifest.json
 * @param {Manifest} manifest - the application manifest
 * @returns enhanced configuration
 */
function enhanceConfig(fs, data, manifestPath, manifest) {
    const config = Object.assign({}, data);
    defaults_1.setCommonDefaults(config, manifestPath, manifest);
    // Apply event handler
    if (config.eventHandler) {
        config.eventHandler = event_handler_1.applyEventHandlerConfiguration(fs, config, config.eventHandler, false, config.typescript);
    }
    // generate section content
    config.content = config.control || defaults_1.getDefaultFragmentContent(config.name, config.eventHandler);
    // Additional dependencies to include into 'Fragment.xml'
    config.dependencies = getAdditionalDependencies(config.minUI5Version);
    return config;
}
/**
 * Add a custom section to an existing UI5 application.
 *
 * @param {string} basePath - the base path
 * @param {CustomSection} customSection - the custom section configuration
 * @param {Editor} [fs] - the mem-fs editor instance
 * @returns {Promise<Editor>} the updated mem-fs editor instance
 */
function generateCustomSection(basePath, customSection, fs) {
    validate_1.validateVersion(customSection.minUI5Version);
    if (!fs) {
        fs = mem_fs_editor_1.create(mem_fs_1.create());
    }
    validate_1.validateBasePath(basePath, fs);
    const manifestPath = path_1.join(basePath, 'webapp/manifest.json');
    const manifest = fs.readJSON(manifestPath);
    // merge with defaults
    const completeSection = enhanceConfig(fs, customSection, manifestPath, manifest);
    // enhance manifest with section definition
    const manifestRoot = getManifestRoot(customSection.minUI5Version);
    const filledTemplate = ejs_1.render(fs.read(path_1.join(manifestRoot, `manifest.json`)), completeSection, {});
    file_1.extendJSON(fs, {
        filepath: manifestPath,
        content: filledTemplate,
        tabInfo: customSection.tabInfo
    });
    // add fragment
    const viewPath = path_1.join(completeSection.path, `${completeSection.name}.fragment.xml`);
    if (!fs.exists(viewPath)) {
        fs.copyTpl(templates_1.getTemplatePath('common/Fragment.xml'), viewPath, completeSection);
    }
    return fs;
}
exports.generateCustomSection = generateCustomSection;
//# sourceMappingURL=index.js.map