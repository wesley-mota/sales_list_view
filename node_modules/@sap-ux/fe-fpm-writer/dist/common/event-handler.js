"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.applyEventHandlerConfiguration = exports.contextParameter = exports.defaultParameter = void 0;
const path_1 = require("path");
const templates_1 = require("../templates");
const utils_1 = require("../common/utils");
/**
 * Default values for the input parameters of newly created event handlers.
 */
exports.defaultParameter = {
    name: 'event',
    description: 'the event object provided by the event provider',
    importType: 'UI5Event',
    importSource: 'sap/ui/base/Event'
};
/**
 * Values for the input parameters of newly created event handlers that are added as manifest actions.
 */
exports.contextParameter = {
    name: 'pageContext',
    description: 'the context of the page on which the event was fired',
    importType: 'Context',
    importSource: 'sap/ui/model/odata/v4/Context'
};
/**
 * Method creates or updates handler js file and update 'settings.eventHandler' entry with namespace path entry to method.
 *
 * @param fs - the memfs editor instance
 * @param config - configuration
 * @param eventHandler - eventHandler for creation
 * @param controllerSuffix - append controller suffix to new file
 * @param typescript - create Typescript file instead of Javascript
 * @param parameters - parameter configurations for the event handler
 * @returns {string} full namespace path to method
 */
function applyEventHandlerConfiguration(fs, config, eventHandler, controllerSuffix = false, typescript, parameters = exports.defaultParameter) {
    if (typeof eventHandler === 'string') {
        // Existing event handler is passed - no need for file creation/update
        return eventHandler;
    }
    // New event handler function name - 'onPress' is default
    let eventHandlerFnName = 'onPress';
    let insertScript;
    // By default - use config name for js file name
    let fileName = `${config.name}`;
    if (typeof eventHandler === 'object') {
        if (eventHandler.fnName) {
            eventHandlerFnName = eventHandler.fnName;
        }
        insertScript = eventHandler.insertScript;
        if (eventHandler.fileName) {
            // Use passed file name
            fileName = eventHandler.fileName;
        }
    }
    const ext = typescript ? 'ts' : 'js';
    const controllerPath = path_1.join(config.path || '', `${fileName}${controllerSuffix ? '.controller' : ''}.${ext}`);
    if (!fs.exists(controllerPath)) {
        fs.copyTpl(templates_1.getTemplatePath(`common/EventHandler.${ext}`), controllerPath, {
            eventHandlerFnName,
            parameters
        });
    }
    else if (insertScript) {
        // Read current file content
        let content = fs.read(controllerPath);
        // Append content with additional script fragment
        if (typeof insertScript.position === 'object') {
            content = utils_1.insertTextAtPosition(insertScript.fragment, content, insertScript.position);
        }
        else {
            content = utils_1.insertTextAtAbsolutePosition(insertScript.fragment, content, insertScript.position);
        }
        fs.write(controllerPath, content);
    }
    // Return full namespace path to method
    return `${config.ns}.${fileName}.${eventHandlerFnName}`;
}
exports.applyEventHandlerConfiguration = applyEventHandlerConfiguration;
//# sourceMappingURL=event-handler.js.map