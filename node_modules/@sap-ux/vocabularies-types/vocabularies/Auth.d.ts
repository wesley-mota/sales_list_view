import * as Edm from "../Edm";
import AnnotationTerm = Edm.AnnotationTerm;
import PropertyAnnotationValue = Edm.PropertyAnnotationValue;
import ComplexType = Edm.RecordComplexType;
/**
  At least one of the specified security schemes are required to make a request against the service
*/
export declare type SecuritySchemes = {
    term: AuthAnnotationTerms.SecuritySchemes;
} & AnnotationTerm<SecuritySchemeTypes[]>;
export declare type SecurityScheme = ComplexType & {
    $Type: AuthAnnotationTypes.SecurityScheme;
    /**
        The name of a required authorization scheme
    */
    Authorization: SchemeName;
    /**
        The names of scopes required from this authorization scheme
    */
    RequiredScopes: PropertyAnnotationValue<Edm.String[]>;
};
/**
  Lists the methods supported by the service to authorize access
*/
export declare type Authorizations = {
    term: AuthAnnotationTerms.Authorizations;
} & AnnotationTerm<AuthorizationTypes[]>;
/**
  Base type for all Authorization types
*/
export declare type Authorization = ComplexType & {
    $Type: AuthAnnotationTypes.Authorization;
    /**
        Name that can be used to reference the authorization scheme
    */
    Name: PropertyAnnotationValue<Edm.String>;
    /**
        Description of the authorization scheme
    */
    Description?: PropertyAnnotationValue<Edm.String>;
};
export declare type OpenIDConnect = ComplexType & Omit<Authorization, '$Type'> & {
    $Type: AuthAnnotationTypes.OpenIDConnect;
    /**
        Issuer location for the OpenID Provider. Configuration information can be obtained by appending `/.well-known/openid-configuration` to this Url.
    */
    IssuerUrl: PropertyAnnotationValue<Edm.String>;
};
export declare type Http = ComplexType & Omit<Authorization, '$Type'> & {
    $Type: AuthAnnotationTypes.Http;
    /**
        HTTP Authorization scheme to be used in the Authorization header, as per RFC7235
    */
    Scheme: PropertyAnnotationValue<Edm.String>;
    /**
        Format of the bearer token
    */
    BearerFormat?: PropertyAnnotationValue<Edm.String>;
};
export declare type OAuthAuthorization = ComplexType & Omit<Authorization, '$Type'> & {
    $Type: AuthAnnotationTypes.OAuthAuthorization;
    /**
        Available scopes
    */
    Scopes: AuthorizationScopeTypes[];
    /**
        Refresh Url
    */
    RefreshUrl?: PropertyAnnotationValue<Edm.String>;
};
export declare type OAuth2ClientCredentials = ComplexType & Omit<OAuthAuthorization, '$Type'> & {
    $Type: AuthAnnotationTypes.OAuth2ClientCredentials;
    /**
        Token Url
    */
    TokenUrl: PropertyAnnotationValue<Edm.String>;
};
export declare type OAuth2Implicit = ComplexType & Omit<OAuthAuthorization, '$Type'> & {
    $Type: AuthAnnotationTypes.OAuth2Implicit;
    /**
        Authorization URL
    */
    AuthorizationUrl: PropertyAnnotationValue<Edm.String>;
};
export declare type OAuth2Password = ComplexType & Omit<OAuthAuthorization, '$Type'> & {
    $Type: AuthAnnotationTypes.OAuth2Password;
    /**
        Token Url
    */
    TokenUrl: PropertyAnnotationValue<Edm.String>;
};
export declare type OAuth2AuthCode = ComplexType & Omit<OAuthAuthorization, '$Type'> & {
    $Type: AuthAnnotationTypes.OAuth2AuthCode;
    /**
        Authorization URL
    */
    AuthorizationUrl: PropertyAnnotationValue<Edm.String>;
    /**
        Token Url
    */
    TokenUrl: PropertyAnnotationValue<Edm.String>;
};
export declare type AuthorizationScope = ComplexType & {
    $Type: AuthAnnotationTypes.AuthorizationScope;
    /**
        Scope name
    */
    Scope: PropertyAnnotationValue<Edm.String>;
    /**
        Identity that has access to the scope or can grant access to the scope.
    */
    Grant?: PropertyAnnotationValue<Edm.String>;
    /**
        Description of the scope
    */
    Description: PropertyAnnotationValue<Edm.String>;
};
export declare type ApiKey = ComplexType & Omit<Authorization, '$Type'> & {
    $Type: AuthAnnotationTypes.ApiKey;
    /**
        The name of the header or query parameter
    */
    KeyName: PropertyAnnotationValue<Edm.String>;
    /**
        Whether the API Key is passed in the header or as a query option
    */
    Location: KeyLocation;
};
export declare const enum KeyLocation {
    /**
    API Key is passed in the header
    */
    /**
    undefined
    */
    Header = "Auth.KeyLocation/Header",
    /**
    API Key is passed as a query option
    */
    /**
    undefined
    */
    QueryOption = "Auth.KeyLocation/QueryOption",
    /**
    API Key is passed as a cookie
    */
    /**
    undefined
    */
    Cookie = "Auth.KeyLocation/Cookie"
}
/**
  The name of the authorization scheme.
*/
export declare type SchemeName = Edm.String;
export declare const enum AuthAnnotationTerms {
    SecuritySchemes = "Org.OData.Authorization.V1.SecuritySchemes",
    Authorizations = "Org.OData.Authorization.V1.Authorizations"
}
export declare const enum AuthAnnotationTypes {
    SecurityScheme = "Org.OData.Authorization.V1.SecurityScheme",
    Authorization = "Org.OData.Authorization.V1.Authorization",
    OpenIDConnect = "Org.OData.Authorization.V1.OpenIDConnect",
    Http = "Org.OData.Authorization.V1.Http",
    OAuthAuthorization = "Org.OData.Authorization.V1.OAuthAuthorization",
    OAuth2ClientCredentials = "Org.OData.Authorization.V1.OAuth2ClientCredentials",
    OAuth2Implicit = "Org.OData.Authorization.V1.OAuth2Implicit",
    OAuth2Password = "Org.OData.Authorization.V1.OAuth2Password",
    OAuth2AuthCode = "Org.OData.Authorization.V1.OAuth2AuthCode",
    AuthorizationScope = "Org.OData.Authorization.V1.AuthorizationScope",
    ApiKey = "Org.OData.Authorization.V1.ApiKey"
}
export declare type SecuritySchemeTypes = SecurityScheme;
export declare type AuthorizationTypes = OpenIDConnectTypes | HttpTypes | OAuthAuthorizationTypes | ApiKeyTypes;
export declare type OpenIDConnectTypes = OpenIDConnect;
export declare type HttpTypes = Http;
export declare type OAuthAuthorizationTypes = OAuth2ClientCredentialsTypes | OAuth2ImplicitTypes | OAuth2PasswordTypes | OAuth2AuthCodeTypes;
export declare type OAuth2ClientCredentialsTypes = OAuth2ClientCredentials;
export declare type OAuth2ImplicitTypes = OAuth2Implicit;
export declare type OAuth2PasswordTypes = OAuth2Password;
export declare type OAuth2AuthCodeTypes = OAuth2AuthCode;
export declare type AuthorizationScopeTypes = AuthorizationScope;
export declare type ApiKeyTypes = ApiKey;
