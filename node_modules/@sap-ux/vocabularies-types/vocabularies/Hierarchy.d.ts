import * as Edm from "../Edm";
import AnnotationTerm = Edm.AnnotationTerm;
import ComplexType = Edm.RecordComplexType;
/**
  Defines a recursive hierarchy
*/
export declare type RecursiveHierarchy = {
    term: HierarchyAnnotationTerms.RecursiveHierarchy;
} & AnnotationTerm<RecursiveHierarchyTypeTypes>;
export declare type RecursiveHierarchyType = ComplexType & {
    $Type: HierarchyAnnotationTypes.RecursiveHierarchyType;
    /**
        Property holding the external key value for a node
    */
    ExternalKeyProperty: Edm.PropertyPath;
    /**
        Property holding the number of descendants of a node
    */
    DescendantCountProperty?: Edm.PropertyPath;
    /**
        Property holding the drill state of a node
    */
    DrillStateProperty?: Edm.PropertyPath;
    /**
        Property holding the sibling rank of a node
    */
    SiblingRankProperty?: Edm.PropertyPath;
    /**
        Property holding the preorder rank of a node
    */
    PreorderRankProperty?: Edm.PropertyPath;
};
export declare const enum HierarchyAnnotationTerms {
    RecursiveHierarchy = "com.sap.vocabularies.Hierarchy.v1.RecursiveHierarchy"
}
export declare const enum HierarchyAnnotationTypes {
    RecursiveHierarchyType = "com.sap.vocabularies.Hierarchy.v1.RecursiveHierarchyType"
}
export declare type RecursiveHierarchyTypeTypes = RecursiveHierarchyType;
