export declare type SimpleIdentifier = string;
export declare type FullyQualifiedName = string;
declare type GenericExpression<K extends keyof any, T> = {
    [P in K]: T;
} & {
    type: K;
};
export declare type Apply = any;
export declare type If = any;
export declare type And = any;
export declare type Or = any;
export declare type Not = any;
export declare type Le = any;
export declare type Lt = any;
export declare type Ge = any;
export declare type Gt = any;
export declare type Ne = any;
export declare type Eq = any;
export declare type StringExpression = GenericExpression<'String', string>;
export declare type BoolExpression = GenericExpression<'Bool', boolean>;
export declare type DecimalExpression = GenericExpression<'Decimal', number>;
export declare type DateExpression = GenericExpression<'Date', string>;
export declare type IntExpression = GenericExpression<'Int', number>;
export declare type FloatExpression = GenericExpression<'Float', number>;
export declare type PathExpression = GenericExpression<'Path', string>;
export declare type PropertyPathExpression = GenericExpression<'PropertyPath', string>;
export declare type AnnotationPathExpression = GenericExpression<'AnnotationPath', string>;
export declare type NavigationPropertyPathExpression = GenericExpression<'NavigationPropertyPath', string>;
export declare type EnumMemberExpression = GenericExpression<'EnumMember', string>;
export declare type CollectionExpression = GenericExpression<'Collection', Collection>;
export declare type RecordExpression = GenericExpression<'Record', AnnotationRecord>;
export declare type ApplyExpression = GenericExpression<'Apply', Apply>;
export declare type IfExpression = GenericExpression<'If', If>;
export declare type AndExpression = GenericExpression<'And', And>;
export declare type OrExpression = GenericExpression<'Or', Or>;
export declare type LeExpression = GenericExpression<'Le', Le>;
export declare type LtExpression = GenericExpression<'Lt', Lt>;
export declare type GeExpression = GenericExpression<'Ge', Ge>;
export declare type GtExpression = GenericExpression<'Gt', Gt>;
export declare type EqExpression = GenericExpression<'Eq', Eq>;
export declare type NeExpression = GenericExpression<'Ne', Ne>;
export declare type NotExpression = GenericExpression<'Not', Not>;
export declare type UnknownExpression = {
    type: 'Unknown';
};
export declare type NullExpression = {
    type: 'Null';
};
export declare type Expression = NullExpression | UnknownExpression | StringExpression | BoolExpression | DecimalExpression | FloatExpression | IntExpression | DateExpression | PathExpression | PropertyPathExpression | AnnotationPathExpression | NavigationPropertyPathExpression | EnumMemberExpression | CollectionExpression | RecordExpression | ApplyExpression | IfExpression | AndExpression | OrExpression | EqExpression | NotExpression | NeExpression | GtExpression | GeExpression | LtExpression | LeExpression;
export declare type Collection = AnnotationRecord[] | string[] | PropertyPathExpression[] | PathExpression[] | NavigationPropertyPathExpression[] | AnnotationPathExpression[];
export declare type AnnotationList = {
    target: FullyQualifiedName;
    annotations: RawAnnotation[];
};
export declare type RawAnnotation = {
    term: FullyQualifiedName;
    qualifier?: SimpleIdentifier;
    value?: Expression;
    collection?: Collection;
    record?: AnnotationRecord;
    annotations?: RawAnnotation[];
};
export declare type PropertyValue = {
    name: SimpleIdentifier;
    value: Expression;
    annotations?: RawAnnotation[];
};
export declare type AnnotationRecord = {
    type?: FullyQualifiedName;
    propertyValues: PropertyValue[];
    annotations?: RawAnnotation[];
};
export {};
