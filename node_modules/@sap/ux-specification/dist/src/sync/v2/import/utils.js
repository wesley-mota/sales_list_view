"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.removeEmptySettings = exports.findCustomSectionExtensions = exports.isAssociatedCustomSection = exports.findAnalyticalListPage = exports.findListReportPageV2 = exports.findObjectPageV2 = void 0;
const ux_specification_types_1 = require("@sap/ux-specification-types");
const manifest_1 = require("../export/manifest");
const common_1 = require("../../common");
const i18next_1 = __importDefault(require("i18next"));
const extensionLogger_1 = require("../../../extensionLogger");
/**
 * Determines a V2 object page in the manifest, based on the given entity set
 * @param v2Pages - manifest['sap.ui.generic.app'].pages
 * @param entitySet - current entityset
 * @param pageKeys - list of page keys, to be filled
 * @returns v2Page - page as specified in the manifest
 */
function findObjectPageV2(v2Pages, entitySet, pageKeys) {
    for (const key in v2Pages) {
        const v2Page = v2Pages[key];
        if (common_1.getPageTypeV2(v2Page.component.name) === ux_specification_types_1.PageTypeV2.ObjectPage && v2Page.entitySet === entitySet) {
            pageKeys.push(key);
            return v2Page;
        }
        else if (v2Page.pages) {
            pageKeys.push(key);
            return findObjectPageV2(v2Page.pages, entitySet, pageKeys);
        }
    }
}
exports.findObjectPageV2 = findObjectPageV2;
/**
 * Determines a V2 list report page in the manifest
 * @param v2Pages - manifest['sap.ui.generic.app'].pages
 * @param pageKeys - list of page keys, to be filled
 * @returns v2Page - page as specified in the manifest
 */
function findListReportPageV2(v2Pages, pageKeys) {
    for (const key in v2Pages) {
        const v2Page = v2Pages[key];
        pageKeys.push(key);
        if (common_1.getPageTypeV2(v2Page.component.name) === ux_specification_types_1.PageTypeV2.ListReport) {
            return v2Page;
        }
    }
}
exports.findListReportPageV2 = findListReportPageV2;
/**
 * Determines a V2 analytical list page in the manifest
 * @param v2Pages - manifest['sap.ui.generic.app'].pages
 * @param pageKeys - list of page keys, to be filled
 * @returns v2Page - page as specified in the manifest
 */
function findAnalyticalListPage(v2Pages, pageKeys, logger) {
    for (const key in v2Pages) {
        const v2Page = v2Pages[key];
        pageKeys.push(key);
        if (common_1.getPageTypeV2(v2Page.component.name) === ux_specification_types_1.PageTypeV2.AnalyticalListPage) {
            return v2Page;
        }
    }
    //Not found ==> log
    extensionLogger_1.log(logger, {
        severity: "error" /* Error */,
        message: i18next_1.default.t('NOALP'),
        location: {
            path: ux_specification_types_1.MANIFESTPATH,
            range: [ux_specification_types_1.ManifestSection.generic]
        }
    });
}
exports.findAnalyticalListPage = findAnalyticalListPage;
/**
 * Method checks if passed extension key is associated to custom section with passed entity.
 * @param {string} extensionKey - Extension key.
 * @param {string} entity - Entity to check in extension.
 * @returns {boolean} Is extension key relates to custom section and associated to passed entity.
 */
function isAssociatedCustomSection(extensionKey, entity) {
    const keyParts = extensionKey.split('|');
    return ux_specification_types_1.v2.SectionPosition[keyParts[0]] && keyParts[1] === entity;
}
exports.isAssociatedCustomSection = isAssociatedCustomSection;
/**
 * Method which finds custom section extensions in manifest for passed entitySet
 * @param manifest - manifest.
 * @param entitySet - Entity set to lookup while searching custom section extensions.
 * @returns {object} Found object with custom sections
 */
function findCustomSectionExtensions(manifest, entitySet) {
    const customSectionViews = manifest_1.ensureManifestSectionByPathV2(manifest, `sap.ui5/extends/extensions/${ux_specification_types_1.v2.SAPUI5_VIEW_EXTENSION}/${ux_specification_types_1.v2.SAPUI5_VIEW_EXTENSION_OBJECT_PAGE}`);
    const pageCustomSections = {};
    for (const key in customSectionViews) {
        if (isAssociatedCustomSection(key, entitySet)) {
            pageCustomSections[key] = customSectionViews[key];
        }
    }
    return pageCustomSections;
}
exports.findCustomSectionExtensions = findCustomSectionExtensions;
/**
 * Removes empty properties of Footer
 * @param {AnalyticalListPageConfig | ListReportConfig} config - the configuration to be checked
 */
function removeEmptySettingsOfFooter(config) {
    if (config.footer?.actions) {
        for (const actionKey in config.footer.actions) {
            if (Object.keys(config.footer.actions[actionKey]).length === 0) {
                delete config.footer.actions[actionKey];
            }
        }
        if (Object.keys(config.footer.actions).length === 0) {
            delete config.footer.actions;
        }
        if (Object.keys(config.footer).length === 0) {
            delete config.footer;
        }
    }
}
/**
 * Removes empty properties of FilterBar
 * @param {AnalyticalListPageConfig | ListReportConfig} config - the configuration to be checked
 */
function removeEmptySettingsOfFilterBar(config) {
    if (config.filterBar?.selectionFields) {
        for (const fieldKey in config.filterBar.selectionFields) {
            if (Object.keys(config.filterBar.selectionFields[fieldKey]).length === 0) {
                delete config.filterBar.selectionFields[fieldKey];
            }
        }
        if (Object.keys(config.filterBar?.selectionFields)?.length === 0) {
            delete config.filterBar.selectionFields;
        }
    }
}
/**
 * Removes empty properties of ToolBar
 * @param {AnalyticalListPageConfig | ListReportConfig} config - the configuration to be checked
 */
function removeEmptySettingsOfToolBar(config) {
    if (config.table?.toolBar) {
        for (const actionKey in config.table.toolBar.actions) {
            if (Object.keys(config.table.toolBar.actions[actionKey]).length === 0) {
                delete config.table.toolBar.actions[actionKey];
            }
        }
        if (Object.keys(config.table.toolBar.actions).length === 0) {
            delete config.table.toolBar.actions;
        }
        if (Object.keys(config.table.toolBar).length === 0) {
            delete config.table.toolBar;
        }
    }
}
/**
 * Removes empty properties in the config.json of Analytical List Page V2 | ListReport Page V2
 * @param {AnalyticalListPageConfig | ListReportConfig} config - the configuration to be checked
 */
function removeEmptySettings(config) {
    // Check ToolBar
    removeEmptySettingsOfToolBar(config);
    // Check FilterBar
    removeEmptySettingsOfFilterBar(config);
    // Check Footer
    removeEmptySettingsOfFooter(config);
}
exports.removeEmptySettings = removeEmptySettings;
//# sourceMappingURL=utils.js.map