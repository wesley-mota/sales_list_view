"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createOverviewPageConfig = void 0;
const ux_specification_types_1 = require("@sap/ux-specification-types");
const decorators_1 = require("../../../common/decoration/decorators");
const manifest_1 = require("../../export/manifest");
const factory_1 = require("../../export/factory");
const export_1 = require("../../export/export");
const common_1 = require("../../../common");
/**
 * Transfers the card settings from manifest to config
 * @param propertyKey - Key of the property or setting
 * @param manifestSection - Section in manifest.json
 * @param configPart - Part of the config JSON
 * @param pathHierarchy - Parts of the path or breadcrumbs
 */
function transferCardSettings(propertyKey, manifestSection, configPart, pathHierarchy) {
    if (propertyKey === 'settings') {
        switch (manifestSection['template']) {
            case 'sap.ovp.cards.charts.analytical':
                configPart[pathHierarchy[0]][ux_specification_types_1.v2.CardSettingsType.analyticalCardSettings] = manifestSection[propertyKey];
                break;
            case 'sap.ovp.cards.v4.charts.analytical':
                configPart[pathHierarchy[0]][ux_specification_types_1.v2.CardSettingsType.analyticalCardSettingsv4] =
                    manifestSection[propertyKey];
                break;
            case 'sap.ovp.cards.list':
            case 'sap.ovp.cards.v4.list':
                configPart[pathHierarchy[0]][ux_specification_types_1.v2.CardSettingsType.listCardSettings] = manifestSection[propertyKey];
                break;
            case 'sap.ovp.cards.stack':
                configPart[pathHierarchy[0]][ux_specification_types_1.v2.CardSettingsType.stackCardSettings] = manifestSection[propertyKey];
                break;
            case 'sap.ovp.cards.linklist':
            case 'sap.ovp.cards.v4.linklist':
                configPart[pathHierarchy[0]][ux_specification_types_1.v2.CardSettingsType.linkListCardSettings] = manifestSection[propertyKey];
                break;
            case 'sap.ovp.cards.table':
            case 'sap.ovp.cards.v4.table':
                configPart[pathHierarchy[0]][ux_specification_types_1.v2.CardSettingsType.tableCardSettings] = manifestSection[propertyKey];
                break;
            default:
                configPart[pathHierarchy[0]].settings = manifestSection[propertyKey];
                break;
        }
    }
    else {
        configPart[pathHierarchy[0]][propertyKey] = manifestSection[propertyKey];
    }
}
/**
 * Handles a list of properties of a given part of the schema, transfers the relevant property values or settings from manifest to config.
 * @param configPart - Part of the config JSON
 * @param manifest - manifest.json or app descriptor
 * @param appSchema - app specific JSON schema
 * @param pathHierarchy - Parts of the path or breadcrumbs
 */
function transferSettingsOfObject(configPart, manifest, appSchema, pathHierarchy) {
    for (const propertyKey in appSchema) {
        const syncRule = decorators_1.getReflectMetadata(configPart, propertyKey);
        if (syncRule?.manifest) {
            const path = syncRule.manifest.path([...pathHierarchy, propertyKey]);
            const manifestSection = manifest_1.ensureManifestSectionByPathV2(manifest, path);
            if (Object.prototype.hasOwnProperty.call(manifestSection, propertyKey)) {
                if (pathHierarchy.length !== 0) {
                    transferCardSettings(propertyKey, manifestSection, configPart, pathHierarchy);
                }
                else {
                    common_1.importProperty(syncRule, manifestSection, propertyKey, configPart);
                }
            }
        }
    }
}
/**
 * OVP: Transfers all settings from manifest to config
 * @param pageConfig - the OVP configuration (JSON)
 * @param manifest  - manifest.json or app descriptor
 * @param appSchema - app specific JSON schema
 * @param factory - Metadata factory
 */
function addSettings(pageConfig, manifest, appSchema, factory) {
    transferSettingsOfObject(pageConfig, manifest, appSchema['properties'], []);
    pageConfig.cards = {};
    Object.keys(manifest[ux_specification_types_1.ManifestSection.ovp]['cards']).forEach((newKey) => {
        const cardTemplate = manifest[ux_specification_types_1.ManifestSection.ovp]['cards'][newKey].template;
        const cardType = ux_specification_types_1.v2.cardTemplateTypeMap[cardTemplate];
        //instantiate Card:
        pageConfig.cards[newKey] = export_1.assignReflectMetadataRules(factory, cardType, {}, 'CustomCard');
        pageConfig.cards = export_1.assignReflectMetadataRules(factory, cardType, pageConfig.cards, 'CustomCard');
        //transfer settings:
        transferSettingsOfObject(pageConfig.cards, manifest, manifest[ux_specification_types_1.ManifestSection.ovp]['cards'][newKey], [newKey]);
    });
}
/**
 * Creates the configuration (file content) for an overview page
 * @param {object} manifest  - manifest of the app
 * @param {object} jsonSchema - app specific JSON schema
 *
 * @returns {object} - the OVP configuration (JSON)
 */
function createOverviewPageConfig(importParameters) {
    const factory = new factory_1.MetadataInstanceFactoryV2();
    //Instantiate Page
    const config = factory.createPageInstance(ux_specification_types_1.PageTypeV2.OverviewPage);
    if (importParameters.jsonSchema) {
        addSettings(config, importParameters.manifest, importParameters.jsonSchema, factory);
    }
    return config;
}
exports.createOverviewPageConfig = createOverviewPageConfig;
//# sourceMappingURL=overviewPage.js.map