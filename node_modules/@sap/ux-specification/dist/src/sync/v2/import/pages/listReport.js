"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createListReportConfig = void 0;
const index_1 = require("../common/index");
const ux_specification_types_1 = require("@sap/ux-specification-types");
const common_1 = require("../../../common");
const extensionLogger_1 = require("../../../../extensionLogger");
const i18next_1 = __importDefault(require("i18next"));
const i18n_1 = require("../../../../i18n/i18n");
const utils_1 = require("../../import/utils");
const factory_1 = require("../../export/factory");
const types_1 = require("../../types");
/**
 * Imports filterbar information into the LR config
 * @param {ListReportConfig} listReportConfig - LR config, to be filled
 * @param {MetadataInstanceInterface} factory - factory, for generating the access to reflect-metadata
 * @param {ImportListReportV2Parameters} importParameters  - object comprising all input data
 * @param {Definition} schemaDefinitions - app schema definitions
 * @param {string} pageKey - key of the page in manifest
 */
function importFilterBar(listReportConfig, factory, importParameters, schemaDefinitions, pageKey) {
    listReportConfig.filterBar = factory.createInstance(ux_specification_types_1.PageTypeV2.ListReport, ux_specification_types_1.DefinitionName.ListReportFilterBar, listReportConfig.filterBar);
    index_1.transferSettingsOfObject(listReportConfig.filterBar, importParameters.manifest, schemaDefinitions[ux_specification_types_1.DefinitionName.ListReportFilterBar], pageKey, importParameters.logger);
    if (schemaDefinitions['SelectionFields']) {
        listReportConfig.filterBar.selectionFields = factory.createInstance(ux_specification_types_1.PageTypeV2.ListReport, ux_specification_types_1.DefinitionName.ListReportFilterBar, listReportConfig.filterBar.selectionFields);
        const schemaSelectionFields = schemaDefinitions['SelectionFields'].properties;
        for (const selectionProperty in schemaSelectionFields) {
            const selectionKey = selectionProperty;
            listReportConfig.filterBar.selectionFields[selectionKey] = factory.createInstance(ux_specification_types_1.PageTypeV2.ListReport, 'SelectionFieldDateSettings');
            index_1.transferSettingsOfObject(listReportConfig.filterBar.selectionFields[selectionKey], importParameters.manifest, schemaDefinitions['SelectionFieldDateSettings'], pageKey, importParameters.logger, selectionKey);
        }
    }
}
/**
 * Imports table information into the LR config
 * @param {TableTypeV2} tableType - table type
 * @param {Definition} schemaDefinitions - app schema definitions
 * @param {ListReportConfig} listReportConfig - LR config, to be filled
 * @param {ImportListReportV2Parameters} importParameters  - object comprising all input data
 * @param {string} pageKey - key of the page in manifest
 */
function importTable(tableType, schemaDefinitions, listReportConfig, importParameters, pageKey) {
    let localJsonSchema;
    if (tableType === 'TreeTable' || tableType === 'AnalyticalTable' || tableType === 'GridTable') {
        localJsonSchema = schemaDefinitions[tableType + '<LineItems>'];
    }
    else {
        if (schemaDefinitions[types_1.MULTISELECTTABLE] && schemaDefinitions[types_1.INLINEDELETETABLE]) {
            localJsonSchema = JSON.parse(JSON.stringify(schemaDefinitions[types_1.MULTISELECTTABLE]));
            localJsonSchema.properties = {
                ...localJsonSchema.properties,
                ...schemaDefinitions[types_1.INLINEDELETETABLE].properties
            };
        }
    }
    index_1.transferSettingsOfObject(listReportConfig.table, importParameters.manifest, localJsonSchema, pageKey, importParameters.logger);
}
/**
 * Adds manifest settings to the config.json of List Report V2
 * @param {ImportListReportV2Parameters} importParameters  - object comprising all input data
 * @param {ListReportConfig} listReportConfig - the configuration to be filled
 * @param {MetadataInstanceInterface} factory - factory, for generating the access to reflect-metadata
 * @param {string} pageKey - key of the page in manifest
 */
function addSettings(importParameters, listReportConfig, factory, pageKey) {
    const tableType = index_1.determineTableType(importParameters.manifest, pageKey);
    listReportConfig.table = factory.createInstance(ux_specification_types_1.PageTypeV2.ListReport, tableType, listReportConfig.table);
    const schemaDefinitions = importParameters.jsonSchema.definitions;
    //Import table:
    importTable(tableType, schemaDefinitions, listReportConfig, importParameters, pageKey);
    //Import ToolBar:
    listReportConfig.table.toolBar = factory.createInstance(ux_specification_types_1.PageTypeV2.ListReport, ux_specification_types_1.DefinitionName.ToolBar, {
        actions: {}
    });
    index_1.transferSettingsOfObject(listReportConfig.table.toolBar, importParameters.manifest, schemaDefinitions[ux_specification_types_1.DefinitionName.ToolBarLR], pageKey, importParameters.logger);
    if (schemaDefinitions[ux_specification_types_1.DefinitionName.ActionsLR]) {
        for (const actionProperty in schemaDefinitions[ux_specification_types_1.DefinitionName.ActionsLR].properties) {
            const actionKey = index_1.convertActionKey(actionProperty);
            listReportConfig.table.toolBar.actions[actionKey] = factory.createInstance(ux_specification_types_1.PageTypeV2.ListReport, ux_specification_types_1.DefinitionName.Action);
            index_1.transferSettingsOfObject(listReportConfig.table.toolBar.actions[actionKey], importParameters.manifest, schemaDefinitions[ux_specification_types_1.DefinitionName.Action], pageKey, importParameters.logger);
        }
    }
    //Import FilterBar:
    importFilterBar(listReportConfig, factory, importParameters, schemaDefinitions, pageKey);
    //Import Footer:
    listReportConfig.footer = { actions: {} };
    const footerAction = schemaDefinitions[ux_specification_types_1.DefinitionName.FooterActionsLR];
    if (footerAction) {
        for (const actionProperty in footerAction.properties) {
            const actionKey = index_1.convertActionKey(actionProperty);
            listReportConfig.footer.actions[actionKey] = factory.createInstance(ux_specification_types_1.PageTypeV2.ListReport, ux_specification_types_1.DefinitionName.FooterAction);
            index_1.transferSettingsOfObject(listReportConfig.footer.actions[actionKey], importParameters.manifest, schemaDefinitions[ux_specification_types_1.DefinitionName.Action], pageKey, importParameters.logger);
        }
    }
}
/**
 * Creates the configuration file content for a list report V2
 * @param {ImportListReportV2Parameters} importParameters  - object comprising all input data
 *
 * @returns {ListReportConfig} - the configuration (JSON) for the list report
 */
function createListReportConfig(importParameters) {
    // Initialize i18next
    i18n_1.initI18n();
    if (!importParameters.manifest[ux_specification_types_1.ManifestSection.generic]) {
        extensionLogger_1.log(importParameters.logger, {
            severity: "error" /* Error */,
            message: i18next_1.default.t('NOFE'),
            location: {
                path: ux_specification_types_1.MANIFESTPATH,
                range: [ux_specification_types_1.ManifestSection.generic]
            }
        });
        return;
    }
    const v2Pages = importParameters.manifest[ux_specification_types_1.ManifestSection.generic].pages;
    if (!v2Pages) {
        extensionLogger_1.log(importParameters.logger, {
            severity: "error" /* Error */,
            message: i18next_1.default.t('NOPAGES', { appId: importParameters.manifest['sap.app']['id'] }),
            location: {
                path: ux_specification_types_1.MANIFESTPATH,
                range: [ux_specification_types_1.ManifestSection.generic]
            }
        });
        return;
    }
    const factory = new factory_1.MetadataInstanceFactoryV2();
    //Instantiate Page
    const config = factory.createPageInstance(ux_specification_types_1.PageTypeV2.ListReport);
    const pageKeys = [];
    const v2Page = utils_1.findListReportPageV2(importParameters.manifest[ux_specification_types_1.ManifestSection.generic].pages, pageKeys);
    if (!v2Page) {
        extensionLogger_1.log(importParameters.logger, {
            severity: "error" /* Error */,
            message: i18next_1.default.t('NOLR'),
            location: {
                path: ux_specification_types_1.MANIFESTPATH,
                range: [ux_specification_types_1.ManifestSection.generic]
            }
        });
        return;
    }
    //Add manifest settings to config
    addSettings(importParameters, config, factory, pageKeys[0]);
    // Add flex changes to config
    importParameters.flex.forEach((change) => {
        if (common_1.parseChangeString(change)) {
            index_1.addFlex(config, change, importParameters.jsonSchema, importParameters.logger);
        }
    });
    index_1.addFragments(config, importParameters.manifest, v2Page, ux_specification_types_1.PageTypeV2.ListReport, importParameters.fragments);
    utils_1.removeEmptySettings(config);
    return config;
}
exports.createListReportConfig = createListReportConfig;
//# sourceMappingURL=listReport.js.map