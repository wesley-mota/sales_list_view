import type { v2 } from '@sap/ux-specification-types';
export declare class CommonCardSettings implements v2.CommonCardSettings {
    entitySet?: string;
    title: string;
    subTitle?: string;
    identificationAnnotationPath?: string;
    selectionAnnotationPath?: string;
    presentationAnnotationPath?: string;
    defaultSpan?: v2.DefaultSpanDef;
    requireAppAuthorization?: string;
    tabs?: [v2.TabSetting];
    addODataSelect?: boolean;
}
export declare class CustomCard extends CommonCardSettings implements v2.CustomCard, v2.CustomCardSettings {
    model: string;
    template: v2.CardTemplateType;
    settings?: v2.CustomCardSettings;
    itemText?: string;
    valueSelectionInfo?: string;
    staticContent?: {
        [k: string]: any;
    }[];
    listFlavor?: 'standard' | 'bar' | 'carousel';
    listType?: 'extended' | 'condensed';
    sortBy?: string;
    sortOrder?: 'ascending' | 'descending';
    annotationPath?: string;
    chartAnnotationPath?: string;
    dataPointAnnotationPath?: string;
    kpiAnnotationPath?: string;
    selectionPresentationAnnotationPath?: string;
    dynamicSubtitleAnnotationPath?: string;
    ignoreSapText?: boolean;
    objectStreamCardsSettings?: {
        showFirstActionInFooter?: boolean;
        annotationPath?: string;
    };
    enableLocaleCurrencyFormatting?: boolean;
    navigation?: 'dataPointNav' | 'chartNav' | 'headerNav' | 'noHeaderNav';
    showFilterInHeader?: boolean;
    showSortingInHeader?: boolean;
    imageSupported?: boolean;
    showLineItemDetail?: boolean;
    showLabelText?: boolean;
    customParams?: string;
    chartProperties?: {
        plotArea?: v2.PlotAreaDef;
    };
    colorPalette?: {
        [k: string]: any;
    }[] | {
        [k: string]: any;
    };
    [k: string]: any;
}
export declare class ListCard extends CommonCardSettings implements v2.ListCard {
    model: string;
    template: v2.CardTemplateType.list | v2.CardTemplateType.listv4;
    settings: v2.ListCardSettings;
    listCardSettings: v2.ListCardSettings;
    listFlavor?: 'standard' | 'bar' | 'carousel';
    listType?: 'extended' | 'condensed';
    annotationPath?: string;
    valueSelectionInfo?: string;
    sortBy?: string;
    sortOrder?: string;
    dataPointAnnotationPath?: string;
}
export declare class AnalyticalCard extends CommonCardSettings implements v2.AnalyticalCard {
    model: string;
    template: v2.CardTemplateType.analytical | v2.CardTemplateType.analyticalv4;
    settings: v2.AnalyticalCardSettings;
    analyticalCardSettings: v2.AnalyticalCardSettings | v2.AnalyticalCardSettingsv4;
    chartAnnotationPath?: string;
    dataPointAnnotationPath?: string;
    valueSelectionInfo?: string;
}
export declare class StackCard extends CommonCardSettings implements v2.StackCard {
    model: string;
    template: v2.CardTemplateType.stack;
    settings: v2.StackCardSettings;
    stackCardSettings: v2.StackCardSettings;
    itemText?: string;
    objectStreamCardsNavigationProperty?: string;
}
export declare class LinklistCard extends CommonCardSettings implements v2.LinklistCard {
    model: string;
    template: v2.CardTemplateType.linklist | v2.CardTemplateType.linklistv4;
    settings: v2.LinkListCardSettings;
    linkListCardSettings: v2.LinkListCardSettings;
    title: string;
    subTitle?: string;
    targetUri?: string;
    listFlavor?: 'standard' | 'bar' | 'carousel';
    sortBy?: string;
    sortOrder?: string;
    headerAnnotationPath?: string;
    identificationAnnotationPath?: string;
    defaultSpan?: v2.DefaultSpanDef;
    staticContent?: v2.StaticContent[];
    requireAppAuthorization?: string;
    annotationPath?: string;
}
export declare class TableCard extends CommonCardSettings implements v2.TableCard {
    model: string;
    template: v2.CardTemplateType.table | v2.CardTemplateType.tablev4;
    disableTableCardFlexibility?: boolean;
    settings: v2.TableCardSettings;
    tableCardSettings: v2.TableCardSettings;
    annotationPath?: string;
    listFlavor?: 'standard' | 'bar' | 'carousel';
    listType?: 'extended' | 'condensed';
    dataPointAnnotationPath?: string;
    selectionPresentationAnnotationPath?: string;
    valueSelectionInfo?: string;
}
//# sourceMappingURL=Card.d.ts.map