"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.generateAnalyticalListReportSchemaV2 = void 0;
const utils_1 = require("./utils");
const import_1 = require("../import");
const common_1 = require("../../common");
const ux_specification_types_1 = require("@sap/ux-specification-types");
const listReport_1 = require("./listReport");
const i18next_1 = __importDefault(require("i18next"));
const extensionLogger_1 = require("../../../extensionLogger");
const ROOT_PROPERTIES_ORDER = ['filterBar', 'table', 'footer'];
/**
 * Generates an app specific schema out of the generic schema.
 * Generic types are replaced by information from the app specific annotations.
 * @param {GenerateAppSchemaParameters} generateParameters - list of API input parameters
 * @param genericSchema - generic JSON schema of a list report
 * @param entityTypeName - the base entity type of the given page
 */
function generateAnalyticalListReportSchemaV2(generateParameters, genericSchema) {
    const appSchema = JSON.parse(JSON.stringify(genericSchema));
    appSchema.properties[ux_specification_types_1.PropertyName.table].anyOf[0]['$ref'] =
        common_1.DEFINITION_LINK_PREFIX + 'ALPResponsiveTable<LineItems>';
    const tableDefinitionResponsive = JSON.parse(JSON.stringify(appSchema.definitions.ALPResponsiveTable));
    tableDefinitionResponsive.properties['columns']['$ref'] = `${common_1.DEFINITION_LINK_PREFIX}${ux_specification_types_1.DefinitionName.LineItems}`;
    tableDefinitionResponsive.properties['toolBar']['$ref'] = `${common_1.DEFINITION_LINK_PREFIX}${ux_specification_types_1.DefinitionName.ToolBarLR}`;
    appSchema.definitions['ALPResponsiveTable<LineItems>'] = tableDefinitionResponsive;
    appSchema.properties[ux_specification_types_1.PropertyName.table]['anyOf'][1]['$ref'] = `${common_1.DEFINITION_LINK_PREFIX}ALPGridTable<LineItems>`;
    const tableDefinitionGrid = JSON.parse(JSON.stringify(appSchema['definitions']['ALPGridTable']));
    tableDefinitionGrid.properties.columns['$ref'] = `${common_1.DEFINITION_LINK_PREFIX}${ux_specification_types_1.DefinitionName.LineItems}`;
    tableDefinitionGrid.properties.toolBar['$ref'] = `${common_1.DEFINITION_LINK_PREFIX}${ux_specification_types_1.DefinitionName.ToolBarLR}`;
    appSchema.definitions['ALPGridTable<LineItems>'] = tableDefinitionGrid;
    appSchema.properties[ux_specification_types_1.PropertyName.table]['anyOf'][2]['$ref'] = `${common_1.DEFINITION_LINK_PREFIX}ALPAnalyticalTable<LineItems>`;
    const tableDefinitionAnalytical = JSON.parse(JSON.stringify(appSchema.definitions['ALPAnalyticalTable']));
    tableDefinitionAnalytical.properties.columns['$ref'] = `${common_1.DEFINITION_LINK_PREFIX}${ux_specification_types_1.DefinitionName.LineItems}`;
    tableDefinitionAnalytical.properties.toolBar['$ref'] = `${common_1.DEFINITION_LINK_PREFIX}${ux_specification_types_1.DefinitionName.ToolBarLR}`;
    appSchema.definitions['ALPAnalyticalTable<LineItems>'] = tableDefinitionAnalytical;
    // Remove Custom Column non existing extensions - TreeTableColumnsExtension does not exist in ALP
    utils_1.removeElementsFromEnum(appSchema.definitions.TableColumnExtensionTypeV2['enum'], [
        ux_specification_types_1.v2.TableColumnExtensionTypeV2.TreeTableColumnsExtension
    ]);
    const entityType = generateParameters.entitySet?.entityType;
    if (!entityType) {
        extensionLogger_1.log(generateParameters.logger, {
            severity: "error" /* Error */,
            message: i18next_1.default.t('NOENTITYTYPE4SET', { entitySetName: generateParameters.entitySet?.name }),
            location: {
                path: ux_specification_types_1.METADATAPATH
            }
        });
    }
    else {
        //handle line items
        const lineItemAnnotation = entityType?.annotations?.UI?.LineItem;
        utils_1.addLineItemsType(appSchema, lineItemAnnotation, entityType);
        //handle filter fields
        const selectionFieldAnnotation = entityType?.annotations?.UI?.SelectionFields;
        utils_1.addSelectionFields(appSchema, selectionFieldAnnotation, entityType);
        //add fields for createWithParameterDialog
        common_1.addFieldsType(appSchema, entityType);
        const pageKeys = [];
        const v2Page = import_1.findAnalyticalListPage(generateParameters.manifest[ux_specification_types_1.ManifestSection.generic].pages, pageKeys, generateParameters.logger);
        utils_1.addTableColumnExtensions(appSchema, entityType, v2Page, generateParameters.manifest, generateParameters.fragments);
        listReport_1.addEnumForVariantPaths(entityType, generateParameters.entitySet, appSchema, generateParameters.serviceAVT);
        // Delete generic definitions that have been replaced
        delete appSchema.definitions.ALPGridTable;
        delete appSchema.definitions.ALPResponsiveTable;
        delete appSchema.definitions.ALPAnalyticalTable;
        delete appSchema.definitions.GenericColumns;
        delete appSchema.definitions.TableColumnAction;
        delete appSchema.definitions.ToolBar;
        delete appSchema.definitions.GenericFooter;
        delete appSchema.definitions.Actions;
        delete appSchema.definitions.FieldPath;
    }
    common_1.updatePropertyIndices(appSchema, ROOT_PROPERTIES_ORDER);
    return appSchema;
}
exports.generateAnalyticalListReportSchemaV2 = generateAnalyticalListReportSchemaV2;
//# sourceMappingURL=analyticalListReport.js.map