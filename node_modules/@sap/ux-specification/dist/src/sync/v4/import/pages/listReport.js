"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createListReportConfig = exports.addSettings = void 0;
const ux_specification_types_1 = require("@sap/ux-specification-types");
const common_1 = require("../../../common");
const utils_1 = require("../utils");
const i18n_1 = require("../../../../i18n/i18n");
const i18next_1 = __importDefault(require("i18next"));
const extensionLogger_1 = require("../../../../extensionLogger");
const factory_1 = require("../../export/factory");
/**
 * Imports the content of annotation-based as well as custom columns
 * @param {ListReportConfig | AnalyticalListPageConfig} config - the configuration to be filled
 * @param {ImportListReportV4Parameters} importParameters  - object comprising all input data
 * @param {MetadataInstanceInterface} factory - factory, for generating the access to reflect-metadata
 * @param {PageTypeV4} pageType - page type
 * @param {string} routingId - ID of the given page
 * @param {string} configId - config id
 * @param {string} viewId - view id in multi view mode
 */
function transferColumns(config, importParameters, factory, pageType, routingId, configId, viewId) {
    const schemaDefinitions = importParameters.jsonSchema.definitions;
    const lineItemsId = configId && configId !== `@${"com.sap.vocabularies.UI.v1.LineItem" /* LineItem */}` ? configId : ux_specification_types_1.DefinitionName.LineItems;
    const lineItems = schemaDefinitions[lineItemsId];
    if (lineItems) {
        config.columns = {};
        for (const columnKey in lineItems.properties) {
            const columnDefinition = schemaDefinitions[lineItemsId].properties[columnKey];
            const schemaPropertyName = columnDefinition.$ref.split(common_1.DEFINITION_LINK_PREFIX)[1].split('<')[0];
            config.columns[columnKey] = factory.createInstance(pageType, schemaPropertyName);
            const targetAnnotation = viewId || configId;
            utils_1.transferSettingsOfObject(config.columns[columnKey], importParameters.manifest, schemaDefinitions[schemaPropertyName], routingId, [columnKey, targetAnnotation], targetAnnotation, importParameters.logger);
            common_1.removeEmptyStructure(config.columns, columnKey);
        }
        common_1.removeEmptyStructure(config, 'columns');
    }
    else {
        extensionLogger_1.log(importParameters.logger, {
            severity: "error" /* Error */,
            message: i18next_1.default.t('NOLINEITEMS')
        });
    }
}
/**
 * Import visual filters of list report
 * @param {ImportListReportV4Parameters} importParameters  - object comprising all input data
 * @param {v4.FilterBar} filterBarConfig - the configuration to be filled
 * @param {MetadataInstanceInterface} factory - factory, for generating the access to reflect-metadata
 * @param {PageTypeV4} pageType - page type
 * @param {string} routingId - page key in manifest
 */
function importVisualFilters(importParameters, filterBarConfig, factory, pageType, routingId) {
    const schemaDefinitions = importParameters.jsonSchema.definitions;
    const visualFilters = schemaDefinitions[ux_specification_types_1.DefinitionName.VisualFilters];
    filterBarConfig.visualFilters = {};
    if (typeof visualFilters === 'object') {
        for (const visualFilter in visualFilters.properties) {
            const filterDefinition = visualFilters.properties[visualFilter];
            if (typeof filterDefinition === 'object' && filterDefinition.$ref) {
                const definitionKey = common_1.getDefinitionKey(filterDefinition.$ref);
                const schemaPropertyName = definitionKey.split('<')[0];
                filterBarConfig.visualFilters[visualFilter] = factory.createInstance(pageType, schemaPropertyName);
                utils_1.transferSettingsOfObject(filterBarConfig.visualFilters[visualFilter], importParameters.manifest, schemaDefinitions[definitionKey], routingId, [visualFilter]);
            }
        }
        common_1.removeEmptyStructure(filterBarConfig, 'visualFilters');
    }
}
/**
 * Import table toolbar actions of list report
 * @param {ImportListReportV4Parameters} importParameters  - object comprising all input data
 * @param {ListReportConfigV4} config - the configuration to be filled
 * @param {MetadataInstanceInterface} factory - factory, for generating the access to reflect-metadata
 * @param {SapUiAppPageV4} page - page in manifest
 * @param {PageTypeV4} pageType - page type
 */
function importActions(importParameters, tableConfig, factory, pageType, routingId, columnDefinitionName = ux_specification_types_1.DefinitionName.LineItems, viewId) {
    const schemaDefinitions = importParameters.jsonSchema.definitions;
    let targetAnnotation = viewId;
    if (!targetAnnotation &&
        [ux_specification_types_1.DefinitionName.LineItems, `${ux_specification_types_1.DefinitionName.LineItems}OfSPV::LineItem`].indexOf(columnDefinitionName) === -1) {
        targetAnnotation = `@${"com.sap.vocabularies.UI.v1.LineItem" /* LineItem */}#${columnDefinitionName.split('::').pop()}`;
    }
    const actionsDefinition = schemaDefinitions[`${ux_specification_types_1.DefinitionName.Actions}<${columnDefinitionName}>`];
    if (typeof actionsDefinition === 'object') {
        for (const actionKey in actionsDefinition.properties) {
            const actionDefinition = actionsDefinition.properties[actionKey];
            if (typeof actionDefinition === 'object' && actionDefinition.$ref) {
                const definitionKey = common_1.getDefinitionKey(actionDefinition.$ref);
                const schemaPropertyName = definitionKey.split('<')[0];
                tableConfig.toolBar.actions[actionKey] = factory.createInstance(pageType, schemaPropertyName);
                utils_1.transferSettingsOfObject(tableConfig.toolBar.actions[actionKey], importParameters.manifest, schemaDefinitions[definitionKey], routingId, [actionKey, targetAnnotation]);
                common_1.removeEmptyStructure(tableConfig.toolBar.actions, actionKey);
            }
        }
    }
}
function transferToolBar(importParameters, config, factory, pageType, routingId, columnDefinitionName = ux_specification_types_1.DefinitionName.LineItems, viewId) {
    const toolbarInstance = factory.createInstance(pageType, ux_specification_types_1.DefinitionName.ToolBar, {
        actions: {}
    });
    let table;
    if (!viewId && config && 'table' in config) {
        table = config.table;
    }
    else {
        table = config;
    }
    table.toolBar = toolbarInstance;
    utils_1.transferSettingsOfObject(table.toolBar, importParameters.manifest, importParameters.jsonSchema.definitions[ux_specification_types_1.DefinitionName.ToolBarLR], routingId, []);
    importActions(importParameters, table, factory, pageType, routingId, columnDefinitionName, viewId);
    common_1.removeEmptyStructure(table.toolBar, 'actions');
    common_1.removeEmptyStructure(table, 'toolBar');
}
/**
 * Determines the target annotation of a list report view or defaultTemplateAnnotationPath
 * @param schemaDefinitions - app schema definitions
 * @param definitionName - current definition name
 * @returns the target annotation as string
 */
function determineTargetAnnotationOfView(schemaDefinitions, definitionName) {
    const lineItemAnnotation = schemaDefinitions[definitionName]?.[ux_specification_types_1.SchemaTag.annotationPath];
    const navigationProperty = schemaDefinitions[definitionName]?.navigationProperty;
    let targetAnnotation = lineItemAnnotation?.substr(lineItemAnnotation.lastIndexOf('@'));
    targetAnnotation = navigationProperty ? `${navigationProperty}/${targetAnnotation}` : targetAnnotation;
    return targetAnnotation;
}
/**
 * Import chart & table view of ALP
 * @param {ImportListReportV4Parameters} importParameters  - object comprising all input data
 * @param {ListReportConfigV4} config - the configuration to be filled
 * @param {MetadataInstanceInterface} factory - factory, for generating the access to reflect-metadata
 * @param {SapUiAppPageV4} page - page in manifest
 * @param {PageTypeV4} pageType - page type
 * @param {string} routingId - page key in manifest
 */
function importALPViews(importParameters, config, factory, pageType, routingId) {
    const schemaDefinitions = importParameters.jsonSchema.definitions;
    //chart view
    config.chart = factory.createInstance(pageType, ux_specification_types_1.DefinitionName.ALPChart);
    const chartDefinition = schemaDefinitions[ux_specification_types_1.DefinitionName.ALPChart];
    const chartAnnotationPath = chartDefinition[ux_specification_types_1.SchemaTag.annotationPath];
    utils_1.transferSettingsOfObject(config.chart, importParameters.manifest, chartDefinition, routingId, [
        chartDefinition[ux_specification_types_1.SchemaTag.key],
        chartAnnotationPath?.substr(chartAnnotationPath.lastIndexOf('@'))
    ]);
    config.chart.toolBar = factory.createInstance(pageType, ux_specification_types_1.DefinitionName.ToolBar, { actions: {} });
    utils_1.transferSettingsOfObject(config.chart.toolBar, importParameters.manifest, schemaDefinitions[ux_specification_types_1.DefinitionName.ViewChartToolBar], routingId, []);
    //table view
    const tableAnnotationPath = schemaDefinitions[ux_specification_types_1.DefinitionName.ALPTable][ux_specification_types_1.SchemaTag.annotationPath];
    if (tableAnnotationPath) {
        const tableDefinition = schemaDefinitions[ux_specification_types_1.DefinitionName.ALPTable];
        const tableConfig = (config.table = factory.createInstance(pageType, ux_specification_types_1.DefinitionName.ALPTable));
        transferToolBar(importParameters, config, factory, pageType, routingId);
        const configId = tableAnnotationPath.substr(tableAnnotationPath.lastIndexOf('@'));
        utils_1.transferSettingsOfObject(tableConfig, importParameters.manifest, tableDefinition, routingId, [
            tableDefinition[ux_specification_types_1.SchemaTag.key],
            configId
        ]);
        //transfer columns
        transferColumns(tableConfig, importParameters, factory, pageType, routingId, undefined, configId);
    }
}
/**
 * Method received view definition name and returns view type.
 * @param {string} definition  - definition name in schema.
 * @returns {DefinitionName | undefined} Resolved view type.
 */
function getViewTypeByDefinition(definition) {
    let viewType;
    if (definition.indexOf(ux_specification_types_1.DefinitionName.LRTableView) > -1) {
        viewType = ux_specification_types_1.DefinitionName.LRTableView;
    }
    else if (definition.indexOf(ux_specification_types_1.DefinitionName.LRChartView) > -1) {
        viewType = ux_specification_types_1.DefinitionName.LRChartView;
    }
    else if (definition === ux_specification_types_1.DefinitionName.TableViewExtension) {
        viewType = ux_specification_types_1.DefinitionName.TableViewExtension;
    }
    return viewType;
}
/**
 * Import table views of list report
 * @param {ImportListReportV4Parameters} importParameters  - object comprising all input data
 * @param {ListReportConfigV4} config - the configuration to be filled
 * @param {MetadataInstanceInterface} factory - factory, for generating the access to reflect-metadata
 * @param {PageTypeV4} pageType - page type
 * @param {string} routingId - page key in manifest
 */
function importLRViews(importParameters, config, factory, pageType, routingId) {
    const tableViewConfig = (config.table.views = factory.createInstance(pageType, ux_specification_types_1.DefinitionName.MultiTableModeV4));
    const schemaDefinitions = importParameters.jsonSchema.definitions;
    //Transfer settings on overall views' level
    utils_1.transferSettingsOfObject(tableViewConfig, importParameters.manifest, schemaDefinitions[ux_specification_types_1.DefinitionName.MultiTableModeV4], routingId, []);
    const properties = schemaDefinitions[ux_specification_types_1.DefinitionName.MultiTableModeV4].properties;
    const sortedList = Object.entries(properties).sort((a, b) => a[1][ux_specification_types_1.SchemaTag.propertyIndex] - b[1][ux_specification_types_1.SchemaTag.propertyIndex]);
    for (const element of sortedList) {
        //process single views
        if (element[1]['$ref']) {
            const nextDefinition = element[1]['$ref'].split(common_1.DEFINITION_LINK_PREFIX)[1];
            const viewType = getViewTypeByDefinition(nextDefinition);
            const tableView = (tableViewConfig[element[0]] = factory.createInstance(pageType, viewType));
            const targetAnnotation = determineTargetAnnotationOfView(schemaDefinitions, nextDefinition);
            utils_1.transferSettingsOfObject(tableView, importParameters.manifest, schemaDefinitions[nextDefinition], routingId, [element[0], targetAnnotation]);
            if (viewType === ux_specification_types_1.DefinitionName.LRTableView) {
                const definitionName = `${ux_specification_types_1.DefinitionName.LineItemsOfView}::${element[0]}`;
                transferToolBar(importParameters, tableView, factory, pageType, routingId, definitionName, targetAnnotation);
                transferColumns(tableView, importParameters, factory, pageType, routingId, definitionName, targetAnnotation);
            }
            if (Object.keys(tableView).length === 0) {
                delete tableViewConfig[element[0]];
            }
        }
    }
    common_1.removeEmptyStructure(config.table, 'views');
}
/**
 * Fills the header actions in the config file of a V4 list report page
 * @param {Definition} appSchema - app specific schema
 * @param {v4.ListReportConfigV4} objectPageConfig - configuration, to be enhanced
 * @param {MetadataInstanceInterface} factory - factory, for generating the access to reflect-metadata
 * @param {Manifest} manifest - manifest.json of the app
 * @param {routingId} string - current (object) page
 */
function transferHeaderActions(appSchema, listReportPageConfig, factory, manifest, routingId) {
    const definitionName = ux_specification_types_1.DefinitionName.HeaderActions;
    const actionType = ux_specification_types_1.PropertyName.header;
    const actions = appSchema.definitions[definitionName];
    if (typeof actions === 'object') {
        listReportPageConfig[actionType].actions = {};
        for (const actionKey in actions.properties) {
            const definition = actions.properties[actionKey];
            if (typeof definition === 'object' && definition.$ref) {
                const definitionKey = common_1.getDefinitionKey(definition.$ref);
                const actionDefinition = appSchema.definitions[definitionKey];
                const key = common_1.getDefinitionKey(actionDefinition.$ref || definition.$ref);
                listReportPageConfig[actionType].actions[actionKey] = factory.createInstance(ux_specification_types_1.PageTypeV4.ObjectPage, key);
                utils_1.transferSettingsOfObject(listReportPageConfig[actionType].actions[actionKey], manifest, appSchema.definitions[key], routingId, [actionKey.replace('/', '??')]);
                common_1.removeEmptyStructure(listReportPageConfig.header, 'actions');
                common_1.removeEmptyStructure(listReportPageConfig, 'header');
            }
        }
    }
}
/**
 * Adds manifest settings to the config.json of LR or ALP V4
 * @param {ImportListReportV4Parameters} importParameters  - object comprising all input data
 * @param {ListReportConfig | AnalyticalListPageConfig} config - the configuration to be filled
 * @param {MetadataInstanceInterface} factory - factory, for generating the access to reflect-metadata
 * @param {PageTypeV4} pageType - page type
 * @param {string} routingId - page key in manifest
 * @param {SchemaType} schemaType - allows distinction of LR and ALP scenario
 */
function addSettings(importParameters, config, factory, pageType, routingId, schemaType) {
    // Transfer page level settings with sync rules
    utils_1.transferSettingsOfObject(config, importParameters.manifest, importParameters.jsonSchema, routingId, []);
    config.header = factory.createInstance(pageType, ux_specification_types_1.DefinitionName.Header);
    utils_1.transferSettingsOfObject(config.header, importParameters.manifest, importParameters.jsonSchema.definitions[ux_specification_types_1.DefinitionName.Header], routingId, []);
    transferHeaderActions(importParameters.jsonSchema, config, factory, importParameters.manifest, routingId);
    //FilterBar:
    config.filterBar = factory.createInstance(pageType, ux_specification_types_1.DefinitionName.FilterBar);
    utils_1.transferSettingsOfObject(config.filterBar, importParameters.manifest, importParameters.jsonSchema.definitions[ux_specification_types_1.DefinitionName.FilterBar], routingId, []);
    importVisualFilters(importParameters, config.filterBar, factory, pageType, routingId);
    //Distinguish ALP table from LR table
    if (schemaType === ux_specification_types_1.SchemaType.ListReport) {
        let definitionName = ux_specification_types_1.DefinitionName.Table;
        let tableDefinition = importParameters.jsonSchema.definitions[definitionName];
        let columnDefinitionName;
        if (tableDefinition.$ref) {
            //(S)PV scenario ==> delegation, go to TableSPV
            definitionName = tableDefinition.$ref.split(common_1.DEFINITION_LINK_PREFIX)[1];
            tableDefinition = importParameters.jsonSchema.definitions[definitionName];
            columnDefinitionName = tableDefinition.properties.columns.$ref.split(common_1.DEFINITION_LINK_PREFIX)[1];
        }
        config.table = factory.createInstance(pageType, ux_specification_types_1.DefinitionName.Table);
        const targetAnnotation = determineTargetAnnotationOfView(importParameters.jsonSchema.definitions, definitionName);
        utils_1.transferSettingsOfObject(config.table, importParameters.manifest, tableDefinition, routingId, [
            definitionName,
            targetAnnotation
        ]);
        //transfer toolbar
        transferToolBar(importParameters, config, factory, pageType, routingId, columnDefinitionName);
        //transfer columns
        transferColumns(config.table, importParameters, factory, pageType, routingId, columnDefinitionName, targetAnnotation);
        importLRViews(importParameters, config, factory, pageType, routingId);
    }
    else if (schemaType === ux_specification_types_1.SchemaType.AnalyticalListPage) {
        importALPViews(importParameters, config, factory, pageType, routingId);
    }
}
exports.addSettings = addSettings;
/**
 * Creates the configuration file content for a list report V4
 * @param {ImportListReportV4Parameters} importParameters  - object comprising all input data
 *
 * @returns {ListReportConfig} - the configuration (JSON) for the list report
 */
function createListReportConfig(importParameters, schemaType) {
    // Initialize i18next
    i18n_1.initI18n();
    if (!importParameters.jsonSchema) {
        return;
    }
    if (!importParameters.manifest[ux_specification_types_1.ManifestSection.ui5] || !importParameters.manifest[ux_specification_types_1.ManifestSection.ui5]['routing']) {
        extensionLogger_1.log(importParameters.logger, {
            severity: "error" /* Error */,
            message: i18next_1.default.t('NOROUTING'),
            location: {
                path: ux_specification_types_1.MANIFESTPATH,
                range: [ux_specification_types_1.ManifestSection.ui5]
            }
        });
        return;
    }
    const v4Pages = importParameters.manifest[ux_specification_types_1.ManifestSection.ui5]['routing']['targets'];
    if (!v4Pages) {
        extensionLogger_1.log(importParameters.logger, {
            severity: "error" /* Error */,
            message: i18next_1.default.t('NOTARGETS'),
            location: {
                path: ux_specification_types_1.MANIFESTPATH,
                range: [ux_specification_types_1.ManifestSection.ui5]
            }
        });
        return;
    }
    const factory = new factory_1.MetadataInstanceFactoryV4();
    //Instantiate Page
    const config = factory.createPageInstance(ux_specification_types_1.PageTypeV4.ListReport);
    for (const key in v4Pages) {
        const v4Page = v4Pages[key];
        const pageType = common_1.getPageTypeV4(v4Page);
        if ('name' in v4Page && (pageType === ux_specification_types_1.PageTypeV4.ListReport || pageType === ux_specification_types_1.PageTypeV4.AnalyticalListPage)) {
            addSettings(importParameters, config, factory, ux_specification_types_1.PageTypeV4.ListReport, key, schemaType);
            break;
        }
    }
    return config;
}
exports.createListReportConfig = createListReportConfig;
//# sourceMappingURL=listReport.js.map