"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.annotationMacrosHandlers = void 0;
const ux_specification_types_1 = require("@sap/ux-specification-types");
const listReport_1 = require("../listReport");
const common_1 = require("../../../common");
const utils_1 = require("./utils");
/**
 * Method returns entity type for passed macros annotation handler params.
 * @param {HandlerParams} params Macros annotation handler params containing serviceAvt and connection context information.
 * @returns {EntityType | undefined} EntityType for passed connection.
 */
function getEntityTypeResolution(params) {
    const { node, serviceAVT, connectionContext } = params;
    const contextPath = utils_1.getAttribute(node, 'contextPath') || connectionContext.contextPath;
    const entitySet = connectionContext.entitySet;
    if (!contextPath && !entitySet) {
        return undefined;
    }
    const resolvedContextPath = serviceAVT?.resolvePath(contextPath || `/${entitySet}`);
    let entityType;
    switch (resolvedContextPath?.target?.['_type']) {
        case 'EntitySet': {
            entityType = resolvedContextPath.target.entityType;
            break;
        }
        case 'NavigationProperty': {
            entityType = resolvedContextPath.target.targetType;
            break;
        }
        case 'EntityType': {
            entityType = resolvedContextPath.target;
            break;
        }
    }
    return entityType;
}
/**
 * Method applies annotation path for passed XML node's schema.
 * @param {HandlerParams} schema Schema to update with "annotationPath".
 * @param {XMLElement} node XML node of macro element.
 * @param {EntityType} [entityType] Entity type object.
 */
function applyAnnotationPath(schema, node, entityType) {
    const metaPath = utils_1.getAttribute(node, 'metaPath');
    if (metaPath && entityType) {
        schema.annotationPath = `/${entityType.fullyQualifiedName}/${metaPath}`;
    }
}
// Handlers map for macros controls
exports.annotationMacrosHandlers = {
    'sap.fe.macros.Chart': (params) => {
        const entityType = getEntityTypeResolution(params);
        applyAnnotationPath(params.schema, params.node, entityType);
    },
    'sap.fe.macros.FilterBar': (params) => {
        const { schema, serviceAVT, rootSchema } = params;
        const entityType = getEntityTypeResolution(params);
        // Handler selection fields
        const filterFieldsDefinition = schema.properties?.filterFields;
        if (typeof filterFieldsDefinition === 'object' && entityType) {
            if (!filterFieldsDefinition.properties) {
                filterFieldsDefinition.properties = {};
            }
            const alias = common_1.findAlias(ux_specification_types_1.UIVOCABULARY, serviceAVT);
            const selectionFieldAnnotation = alias && entityType.annotations?.[alias]?.SelectionFields;
            listReport_1.addSelectionFields(entityType, rootSchema, selectionFieldAnnotation, filterFieldsDefinition);
        }
    }
};
//# sourceMappingURL=annotations.js.map