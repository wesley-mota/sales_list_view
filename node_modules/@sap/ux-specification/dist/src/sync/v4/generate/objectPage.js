"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.generateObjectPageSchemaV4 = void 0;
const i18next_1 = __importDefault(require("i18next"));
const extensionLogger_1 = require("../../../extensionLogger");
const ux_specification_types_1 = require("@sap/ux-specification-types");
const common_1 = require("../../common");
const utils_1 = require("../utils/utils");
const utils_2 = require("../utils/utils");
const StableIdHelper_1 = require("../../v4/utils/StableIdHelper");
const ROOT_PROPERTIES_ORDER = ['header', 'layout', 'sections', 'footer'];
const CUSTOM_ACTION_DEFINITION_DESCRIPTION = 'Custom Action';
/**
 * Callback for adding a single action to headerActions of V4
 * @param {EntityType} entityType - current entity type
 * @param {Definition} appSchema Schema of the app
 * @param actionAnnotation - annotation as present in AVT ConvertedMetadata
 * @param {Definition} headerActions - list of header actions, to be enhanced
 * @param {ConvertedMetadata} oDataServiceAVT - complete service information, as returned by annotation vocabularies tool
 */
function addHeaderActionCallBackV4(entityType, appSchema, actionAnnotation, headerActions, oDataServiceAVT) {
    return (item, index) => {
        if ((!item['Determining'] && item.$Type === "com.sap.vocabularies.UI.v1.DataFieldForAction" /* DataFieldForAction */) ||
            item.$Type === "com.sap.vocabularies.UI.v1.DataFieldForIntentBasedNavigation" /* DataFieldForIntentBasedNavigation */) {
            const { actionName, actionId, namespace } = common_1.getActionNameAndId(item, entityType, oDataServiceAVT);
            if (!actionId) {
                return;
            }
            const stableId = StableIdHelper_1.getStableIdPartFromDataField(item);
            //stableId is used as key in V4, as the DataFieldForAction:: prefix shall be present in manifest settings
            const convertedIdentification = actionAnnotation.fullyQualifiedName.replace(`@${"com.sap.vocabularies.UI.v1.Identification" /* Identification */}`, `/@${"com.sap.vocabularies.UI.v1.Identification" /* Identification */}`);
            const actionDefinitionKey = `ObjectPageHeaderAction<${common_1.prepareRef(stableId)}>`;
            const headerAction = (appSchema.definitions[actionDefinitionKey] = {
                type: 'object',
                $ref: `${common_1.DEFINITION_LINK_PREFIX}${ux_specification_types_1.DefinitionName.ObjectPageHeaderAction}`,
                description: common_1.getDataFieldDescription(item, entityType)
            });
            headerAction[ux_specification_types_1.SchemaTag.isViewNode] = true;
            headerAction[ux_specification_types_1.SchemaTag.keys] = [{ name: ux_specification_types_1.SchemaKeyName.action, value: actionName }];
            if (namespace) {
                appSchema.definitions[actionDefinitionKey][ux_specification_types_1.SchemaTag.target] = namespace;
            }
            headerAction[ux_specification_types_1.SchemaTag.annotationPath] = `/${convertedIdentification}/${index}`;
            headerActions.properties[stableId] = {
                $ref: `${common_1.DEFINITION_LINK_PREFIX}${actionDefinitionKey}`
            };
        }
    };
}
/**
 * Callback for adding a single action to footerActions of V4
 * @param {EntityType} entityType - current entity type
 * @param {Definition} appSchema Schema of the app
 * @param {Definition} footerActions - list of footer actions, to be enhanced
 * @param {String} convertedIdentification - converted UI.Identification term
 */
function addFooterActionCallBackV4(entityType, appSchema, footerActions, convertedIdentification) {
    return (item, index) => {
        if (item['Determining'] && item.$Type === "com.sap.vocabularies.UI.v1.DataFieldForAction" /* DataFieldForAction */) {
            const actionId = StableIdHelper_1.getStableIdPartFromDataField(item);
            const description = common_1.getDataFieldDescription(item, entityType);
            const actionDefinitionKey = common_1.prepareRef(`${ux_specification_types_1.DefinitionName.ObjectPageFooterAction}<${actionId}>`);
            appSchema.definitions[actionDefinitionKey] = {
                type: 'object',
                $ref: `${common_1.DEFINITION_LINK_PREFIX}${ux_specification_types_1.DefinitionName.FooterActionV4}`,
                description: description
            };
            appSchema.definitions[actionDefinitionKey][ux_specification_types_1.SchemaTag.isViewNode] = true;
            appSchema.definitions[actionDefinitionKey][ux_specification_types_1.SchemaTag.annotationPath] = `/${convertedIdentification}/${index}`;
            footerActions.properties[actionId] = {
                $ref: `${common_1.DEFINITION_LINK_PREFIX}${actionDefinitionKey}`
            };
        }
    };
}
/**
 * Object Page specific enhancements to addCustomColumnDefinition
 * @param {object} appSchema App schema in general
 * @param {SapUiAppPageV4} v4Page Current page in manifest
 * @param {string} lineItemId - identifier of the current table in schema
 * @param {string} facetIdInManifest - identifier of the current object page section in manifest
 * @param {ExtensionLogger} logger - logger for exceptions
 */
function addCustomColumnsOP(appSchema, v4Page, lineItemId, facetIdInManifest, logger) {
    // Create type specific copy of 'TableCustomColumnOP'
    const useDefinitionAsKey = lineItemId !== ux_specification_types_1.DefinitionName.LineItems &&
        lineItemId !== 'LineItemsOfSPV::LineItem' &&
        lineItemId !== '@com.sap.vocabularies.UI.v1.LineItem';
    const customColumDefinitionKey = useDefinitionAsKey
        ? `${ux_specification_types_1.DefinitionName.CustomColumnOP}<${lineItemId}>`
        : ux_specification_types_1.DefinitionName.CustomColumnOP;
    const customColumnDefinition = appSchema.definitions[customColumDefinitionKey];
    customColumnDefinition[ux_specification_types_1.SchemaTag.isViewNode] = true;
    customColumnDefinition.description = 'Custom Column';
    // Update definitions for type specific custom columns
    const schemaId = `${ux_specification_types_1.DefinitionName.CustomColumnOP}<${lineItemId}>`;
    utils_2.addCustomColumnDefinition(appSchema, v4Page, logger, schemaId, lineItemId, facetIdInManifest);
    const facetKey = useDefinitionAsKey ? lineItemId : ux_specification_types_1.DefinitionName.PositionOP;
    common_1.parseSchemaDefinition(ux_specification_types_1.DefinitionName.PositionOP, facetKey, appSchema, useDefinitionAsKey);
    const positionId = useDefinitionAsKey ? `${ux_specification_types_1.DefinitionName.PositionOP}<${lineItemId}>` : ux_specification_types_1.DefinitionName.PositionOP;
    customColumnDefinition.properties.position.$ref = `${common_1.DEFINITION_LINK_PREFIX}${positionId}`;
    utils_2.addFragmentEnumForAnchor(appSchema, lineItemId, v4Page, positionId, facetIdInManifest.replace(/::/g, '/'));
}
/**
 * Object Page specific enhancements to addCustomColumnDefinition
 * @param {object} appSchema App schema in general
 * @param {SapUiAppPageV4} v4Page Current page in manifest
 * @param {string} lineItemId - identifier of the current table in schema
 * @param {string} facetIdInManifest - identifier of the current object page section in manifest
 * @param {ExtensionLogger} logger - logger for exceptions
 */
function addTableCustomActionsOP(appSchema, v4Page, lineItemId, facetIdInManifest, logger) {
    // Create type specific copy of 'TableCustomActionOP'
    const useDefinitionAsKey = lineItemId !== ux_specification_types_1.DefinitionName.LineItems &&
        lineItemId !== 'LineItemsOfSPV::LineItem' &&
        lineItemId !== '@com.sap.vocabularies.UI.v1.LineItem';
    const customActionDefinitionKey = useDefinitionAsKey
        ? `${ux_specification_types_1.DefinitionName.CustomTableActionOP}<${lineItemId}>`
        : ux_specification_types_1.DefinitionName.CustomTableActionOP;
    const customActionDefinition = appSchema.definitions[customActionDefinitionKey];
    customActionDefinition[ux_specification_types_1.SchemaTag.isViewNode] = true;
    customActionDefinition.description = CUSTOM_ACTION_DEFINITION_DESCRIPTION;
    // Update definitions for type specific custom columns
    const schemaId = `${ux_specification_types_1.DefinitionName.CustomTableActionOP}<${lineItemId}>`;
    const schemaIdForActions = `${ux_specification_types_1.DefinitionName.Actions}<${common_1.prepareRef(lineItemId)}>`;
    utils_2.addCustomActionDefinition(appSchema, v4Page, logger, schemaId, schemaIdForActions, facetIdInManifest);
    const facetKey = useDefinitionAsKey ? lineItemId : ux_specification_types_1.DefinitionName.CustomActionPositionOP;
    common_1.parseSchemaDefinition(ux_specification_types_1.DefinitionName.CustomActionPositionOP, facetKey, appSchema, useDefinitionAsKey);
    // Anchor selection
    const positionId = useDefinitionAsKey
        ? `${ux_specification_types_1.DefinitionName.CustomActionPositionOP}<${lineItemId}>`
        : ux_specification_types_1.DefinitionName.CustomActionPositionOP;
    customActionDefinition.properties.position.$ref = `${common_1.DEFINITION_LINK_PREFIX}${positionId}`;
    utils_2.addEnumForActionAnchor(appSchema, schemaIdForActions, positionId);
}
/**
 * Object Page specific custom action enhancements to header and footer
 * @param {object} appSchema App schema in general
 * @param {SapUiAppPageV4} v4Page Current page in manifest
 * @param {DefinitionName} customActionDefinitionKey custom action key used in definitions
 * @param {ExtensionLogger} logger - logger for exceptions
 */
function addHeaderFooterCustomActionsOP(appSchema, v4Page, customActionDefinitionKey, logger) {
    const customActionDefinition = appSchema.definitions[customActionDefinitionKey];
    customActionDefinition[ux_specification_types_1.SchemaTag.isViewNode] = true;
    customActionDefinition.description = CUSTOM_ACTION_DEFINITION_DESCRIPTION;
    const schemaIdForActions = customActionDefinitionKey === ux_specification_types_1.DefinitionName.CustomHeaderActionOP
        ? ux_specification_types_1.DefinitionName.ObjectPageHeaderActions
        : ux_specification_types_1.DefinitionName.FooterActions;
    utils_1.addHeaderFooterCustomActionDefinition(appSchema, v4Page, logger, customActionDefinitionKey, schemaIdForActions);
    const facetKey = customActionDefinitionKey === ux_specification_types_1.DefinitionName.CustomHeaderActionOP
        ? ux_specification_types_1.DefinitionName.CustomHeaderActionPositionOP
        : ux_specification_types_1.DefinitionName.CustomFooterActionPositionOP;
    common_1.parseSchemaDefinition(facetKey, facetKey, appSchema, false);
    // Anchor selection
    customActionDefinition.properties.position.$ref = `${common_1.DEFINITION_LINK_PREFIX}${facetKey}`;
    utils_2.addEnumForActionAnchor(appSchema, schemaIdForActions, facetKey);
    if (appSchema.definitions[schemaIdForActions]) {
        appSchema.definitions[schemaIdForActions].additionalProperties = {
            $ref: `${common_1.DEFINITION_LINK_PREFIX}${customActionDefinitionKey}`
        };
    }
}
/**
 * Object Page specific enhancements to handleFormIdentification
 * @param {object} appSchema App schema in general
 * @param {SapUiAppPageV4} v4Page Current page in manifest
 * @param {string} formItemId - identifier of the current form in schema
 * @param {string} facetIdInManifest - identifier of the current object page section in manifest
 * @param {ExtensionLogger} logger - logger for exceptions
 */
function addFormCustomActionsOP(appSchema, v4Page, formItemId, facetIdInManifest, logger) {
    const useDefinitionAsKey = true;
    const customActionDefinitionKey = useDefinitionAsKey
        ? `${ux_specification_types_1.DefinitionName.CustomFormActionOP}<${formItemId}>`
        : ux_specification_types_1.DefinitionName.CustomFormActionOP;
    const customActionDefinition = appSchema.definitions[customActionDefinitionKey];
    customActionDefinition[ux_specification_types_1.SchemaTag.isViewNode] = true;
    customActionDefinition.description = CUSTOM_ACTION_DEFINITION_DESCRIPTION;
    const schemaId = `${ux_specification_types_1.DefinitionName.CustomFormActionOP}<${formItemId}>`;
    const schemaIdForActions = `${ux_specification_types_1.DefinitionName.SectionActions}<${common_1.prepareRef(formItemId)}>`;
    utils_2.addCustomActionDefinition(appSchema, v4Page, logger, schemaId, schemaIdForActions, facetIdInManifest);
    const facetKey = useDefinitionAsKey ? formItemId : ux_specification_types_1.DefinitionName.CustomActionPositionOP;
    common_1.parseSchemaDefinition(ux_specification_types_1.DefinitionName.CustomActionPositionOP, facetKey, appSchema, useDefinitionAsKey);
    // Anchor selection
    const positionId = useDefinitionAsKey
        ? `${ux_specification_types_1.DefinitionName.CustomActionPositionOP}<${formItemId}>`
        : ux_specification_types_1.DefinitionName.CustomActionPositionOP;
    customActionDefinition.properties.position.$ref = `${common_1.DEFINITION_LINK_PREFIX}${positionId}`;
    utils_2.addEnumForActionAnchor(appSchema, schemaIdForActions, positionId);
    if (appSchema.definitions[schemaIdForActions]) {
        appSchema.definitions[schemaIdForActions].additionalProperties = {
            $ref: `${common_1.DEFINITION_LINK_PREFIX}${customActionDefinitionKey}`
        };
    }
}
/**
 * Adds definitions for line items in object page sections to the app schema
 * @param {FacetConfig} facet - the given facet from the UI annotations
 * @param {string} facetKey - key of the facet, as used in annotation
 * @param {Definition} appSchema - app schema in general
 * @param {object} lineItemFacet - current lineItem facet
 * @param {ConvertedMetadata} oDataServiceAVT - complete service information, as returned by annotation vocabularies tool
 * @param {SapUiAppPageV4} v4Page Current page in manifest
 * @param {ExtensionLogger} logger - logger for exceptions
 */
function handleLineItem(facet, facetKey, appSchema, lineItemFacet, oDataServiceAVT, v4Page, logger) {
    const lineItemId = common_1.getFacetKeyInSchema(facetKey);
    const index = facetKey.lastIndexOf('::');
    const annotation = index > -1 ? facetKey.substring(index + 2) : facetKey;
    const tableDefinition = common_1.parseSchemaDefinition(ux_specification_types_1.DefinitionName.ObjectPageTable, facetKey, appSchema);
    if (facet.entityType && annotation) {
        tableDefinition[ux_specification_types_1.SchemaTag.annotationPath] = `/${facet.entityType.fullyQualifiedName}/${annotation}`;
    }
    tableDefinition.properties.columns = {
        $ref: `${common_1.DEFINITION_LINK_PREFIX}${lineItemId}`
    };
    tableDefinition.properties.toolBar.$ref = common_1.getFacetDefinitionLink(ux_specification_types_1.DefinitionName.ObjectPageToolBar, facetKey);
    //adjust quickVariantSelection
    tableDefinition.properties.quickVariantSelection.$ref = common_1.getFacetDefinitionLink(ux_specification_types_1.DefinitionName.QuickVariantSelectionV4OP, facetKey);
    const tableQVS = common_1.parseSchemaDefinition(ux_specification_types_1.DefinitionName.QuickVariantSelectionV4OP, facetKey, appSchema);
    tableQVS.properties.paths['items'].$ref = common_1.getFacetDefinitionLink(ux_specification_types_1.DefinitionName.AnnotationPathAsObject, facetKey);
    common_1.parseSchemaDefinition(ux_specification_types_1.DefinitionName.AnnotationPathAsObject, facetKey, appSchema);
    common_1.addEnumForSingleTabVariant(facet.entityType, appSchema, `${ux_specification_types_1.DefinitionName.AnnotationPathAsObject}<${lineItemId}>`);
    const dataForLineItem = {
        appSchema,
        lineItemAnnotation: lineItemFacet['target'],
        entityType: lineItemFacet['entityType'],
        oDataServiceAVT,
        lineItemId
    };
    utils_2.addLineItemsTypeToSchema(dataForLineItem, ux_specification_types_1.DefinitionName.ObjectPageTableColumn, ux_specification_types_1.DefinitionName.CustomColumnOP, ux_specification_types_1.DefinitionName.CustomTableActionOP);
    addCustomColumnsOP(appSchema, v4Page, lineItemId, facetKey, logger);
    addTableCustomActionsOP(appSchema, v4Page, lineItemId, facetKey, logger);
    return tableDefinition;
}
/**
 * Adds definitions for table section in object page sections to the app schema
 * @param {FacetConfig} facet - current facet.
 * @param {string} facetKey - facet key.
 * @param {Definition} appSchema - app specific schema that potentially gets enhanced.
 * @param {object} lineItemFacet - current lineItem facet
 * @param {GenerateSchemaParameters} generateParameters - list of API input parameters
 * @param {SapUiAppPageV4} v4Page Current page in manifest
 * @param {Definition} sections - schema of current sections definition.
 * @returns {object} sectionTable - section of app schema containing added table section
 */
function handleSectionTable(facet, facetKey, appSchema, lineItemFacet, generateParameters, v4Page, sections) {
    if (sections) {
        sections.properties[facetKey] = {
            $ref: common_1.getFacetDefinitionLink(ux_specification_types_1.DefinitionName.ObjectPageSectionTableV4, facetKey)
        };
    }
    const sectionTable = common_1.parseSchemaDefinition(ux_specification_types_1.DefinitionName.ObjectPageSectionTableV4, facetKey, appSchema);
    common_1.addSectionTitleAndDescription(facet, sectionTable, common_1.getFacetKeyInSchema(facetKey));
    sectionTable[ux_specification_types_1.SchemaTag.annotationPath] = facet.annotationPath;
    sectionTable[ux_specification_types_1.SchemaTag.target] = facet.namespace;
    sectionTable.properties.table['$ref'] = common_1.getFacetDefinitionLink(ux_specification_types_1.DefinitionName.ObjectPageTable, facetKey);
    const table = handleLineItem(facet, facetKey, appSchema, lineItemFacet, generateParameters.serviceAVT, v4Page, generateParameters.logger);
    return { sectionTable, table };
}
/**
 * Adds definitions for Identification and Form facet items in object page sections to the app schema
 * @param {FacetConfig} facet - current facet
 * @param {v4.SapUiAppPageV4} v4Page Current page in manifest
 * @param {string} facetKey - facet key
 * @param {object} sections - schema of current sections definition
 * @param {object} appSchema - app specific schema that potentially gets enhanced
 * @param {SectionType} sectionPrefix - prefix to distinguish Section and HeaderSection
 * @param {ExtensionLogger} logger - logger for exceptions
 */
function handleFormIdentification(facet, v4Page, facetKey, sections, appSchema, sectionPrefix, logger) {
    let definitionType;
    if (sectionPrefix === ux_specification_types_1.SectionType.Section) {
        definitionType = ux_specification_types_1.DefinitionName.ObjectPageSectionForm;
    }
    else if (sectionPrefix === ux_specification_types_1.SectionType.HeaderSection) {
        definitionType = ux_specification_types_1.DefinitionName.ObjectPageHeaderSectionForm;
    }
    sections['properties'][facetKey] = {
        $ref: common_1.getFacetDefinitionLink(definitionType, facetKey)
    };
    const formSection = common_1.parseSchemaDefinition(definitionType, facetKey, appSchema);
    if (!facet.ID) {
        formSection.properties = {};
    }
    common_1.addSectionTitleAndDescription(facet, formSection, facetKey);
    formSection[ux_specification_types_1.SchemaTag.annotationPath] = facet.annotationPath;
    formSection[ux_specification_types_1.SchemaTag.target] = facet.namespace;
    formSection[ux_specification_types_1.SchemaTag.isViewNode] = true;
    const targetId = common_1.handleForm(sectionPrefix, facet, formSection, appSchema, ux_specification_types_1.FioriElementsVersion.v4, facetKey);
    if (facet.base === ux_specification_types_1.FacetBase.Form) {
        const formItemId = common_1.getFacetKeyInSchema(facetKey);
        common_1.parseSchemaDefinition(ux_specification_types_1.DefinitionName.CustomFormActionOP, targetId, appSchema);
        addFormCustomActionsOP(appSchema, v4Page, targetId, formItemId, logger);
    }
}
/**
 * Adds definitions for header sections (DataPoint, Chart) in object page sections to the app schema
 * @param {FacetConfig} facet - current facet.
 * @param {string} facetKey - facet key.
 * @param {object} sections - schema of current sections definition.
 * @param {object} appSchema - app specific schema that potentially gets enhanced.
 * @param {SectionType} facetDefinitionKey - key to identify new definition
 */
function handleHeaderFacet(facet, facetKey, sections, appSchema, facetDefinitionKey) {
    sections['properties'][facetKey] = {
        $ref: `${common_1.DEFINITION_LINK_PREFIX}${facetDefinitionKey}`
    };
    const sectionFacet = common_1.parseSchemaDefinition(ux_specification_types_1.DefinitionName.CommonHeaderFacetSettings, facetDefinitionKey, appSchema, false);
    common_1.addTargetTitleAndSectionDescription(facet, sectionFacet, facetKey);
    sectionFacet[ux_specification_types_1.SchemaTag.annotationPath] = facet.annotationPath;
    sectionFacet[ux_specification_types_1.SchemaTag.target] = facet.namespace;
    sectionFacet[ux_specification_types_1.SchemaTag.dataType] = common_1.determineDataTypeOfTarget(facet?.target);
    sectionFacet[ux_specification_types_1.SchemaTag.isViewNode] = true;
}
/**
 * Adds definitions for Chart items in object page sections to the app schema
 * @param {FacetConfig | Chart | object} facet - current facet.
 * @param {string} facetKey - facet key.
 * @param {object} appSchema - app specific schema that potentially gets enhanced.
 * @param {EntityType} entityType - current entity type
 */
function handleChartActions(facet, facetKey, appSchema, entityType) {
    const actions = common_1.parseSchemaDefinition(ux_specification_types_1.DefinitionName.ObjectPageToolBarActions, facetKey, appSchema);
    actions.additionalProperties = false;
    actions.properties = {};
    if (facet.Actions) {
        let i = 0;
        facet.Actions.forEach((actionRecord) => {
            const description = common_1.getDataFieldDescription(actionRecord, entityType);
            const prefix = actionRecord.$Type.split(ux_specification_types_1.UIVOCABULARYDOT)[1];
            const actionId = actionRecord.Action.replace('/', '::');
            const toolBarActionsProperty = (actions.properties[`${prefix}::${actionRecord.Action}`] = {
                $ref: common_1.getFacetDefinitionLink(ux_specification_types_1.DefinitionName.ObjectPageToolBarAction, actionId),
                description
            });
            toolBarActionsProperty[ux_specification_types_1.SchemaTag.propertyIndex] = i;
            toolBarActionsProperty[ux_specification_types_1.SchemaTag.annotationType] = actionRecord.$Type;
            const toolBarAction = common_1.parseSchemaDefinition(ux_specification_types_1.DefinitionName.ObjectPageToolBarAction, common_1.prepareRef(actionId), appSchema);
            toolBarAction[ux_specification_types_1.SchemaTag.annotationPath] = common_1.getFacetAnnotationPath(actionRecord);
            toolBarAction[ux_specification_types_1.SchemaTag.dataType] = common_1.determineDataType(actionRecord);
            toolBarAction.properties = {};
            i++;
        });
    }
    return actions;
}
/**
 * Adds definitions for Chart items in object page sections to the app schema
 * @param {FacetConfig | Chart | object} facet - current facet.
 * @param {string} facetKey - facet key.
 * @param {object} appSchema - app specific schema that potentially gets enhanced.
 * @param {EntityType} entityType - current entity type
 */
function handleChart(facet, facetKey, appSchema, entityType) {
    const chart = common_1.parseSchemaDefinition(ux_specification_types_1.DefinitionName.ObjectPageChart, facetKey, appSchema);
    if (facet['Title']) {
        chart.description = facet['Title'];
    }
    chart[ux_specification_types_1.SchemaTag.annotationPath] = common_1.getFacetAnnotationPath(facet);
    chart[ux_specification_types_1.SchemaTag.dataType] = common_1.determineDataTypeOfTarget(facet.target || facet);
    chart[ux_specification_types_1.SchemaTag.isViewNode] = true;
    chart.properties.toolBar['$ref'] = common_1.getFacetDefinitionLink(ux_specification_types_1.DefinitionName.ObjectPageToolBar, facetKey);
    const chartToolBar = common_1.parseSchemaDefinition(ux_specification_types_1.DefinitionName.ObjectPageToolBar, facetKey, appSchema);
    chartToolBar.properties.actions['$ref'] = common_1.getFacetDefinitionLink(ux_specification_types_1.DefinitionName.ObjectPageToolBarActions, facetKey);
    const chartActions = handleChartActions(facet, facetKey, appSchema, entityType);
    return { chart, chartActions };
}
/**
 * Adds definitions for Chart section in object page sections to the app schema
 * @param {FacetConfig} facet - current facet.
 * @param {string} facetKey - facet key.
 * @param {object} appSchema - app specific schema that potentially gets enhanced.
 * @param {object} sections - schema of current sections definition.
 * @param {EntityType} entityType - current entity type
 */
function handleSectionChart(facet, facetKey, appSchema, sections, entityType = facet.entityType) {
    if (sections) {
        sections.properties[facetKey] = {
            $ref: common_1.getFacetDefinitionLink(ux_specification_types_1.DefinitionName.ObjectPageSectionChart, facetKey)
        };
    }
    const sectionChart = common_1.parseSchemaDefinition(ux_specification_types_1.DefinitionName.ObjectPageSectionChart, facetKey, appSchema);
    common_1.addTargetTitleAndSectionDescription(facet, sectionChart, facetKey);
    sectionChart[ux_specification_types_1.SchemaTag.annotationPath] = common_1.getFacetAnnotationPath(facet);
    sectionChart.properties.chart['$ref'] = common_1.getFacetDefinitionLink(ux_specification_types_1.DefinitionName.ObjectPageChart, facetKey);
    const { chart, chartActions } = handleChart(facet.target || facet, facetKey, appSchema, entityType);
    return { sectionChart, chart, chartActions };
}
/**
 * Adds definitions for presentation variants in object page sections to the app schema
 * @param {FacetConfig} facet - the given facet from the UI annotations
 * @param {string} facetKey - key of the facet, as used in annotation
 * @param {Definition} appSchema - app schema in general
 * @param {object} sections - schema of current sections definition.
 * @param {GenerateSchemaParameters} generateParameters - list of API input parameters
 * @param {SapUiAppPageV4} v4Page Current page in manifest
 */
function handleSectionPresentationVariant(facet, facetKey, appSchema, sections, generateParameters, v4Page) {
    let facetTarget, visualizationKey, target;
    const visualizations = facet.target.Visualizations;
    const navPath = facetKey.lastIndexOf('::') > 0 ? facetKey.slice(0, facetKey.lastIndexOf('::')) : undefined;
    if (visualizations?.[0]) {
        if (visualizations[0].$target) {
            facetTarget = visualizations[0].$target;
            visualizationKey = `@${facetTarget.fullyQualifiedName.split('@')[1].split('/')[0]}`;
            target = facetTarget;
        }
        else {
            facetTarget = visualizations[0];
            visualizationKey =
                '@' +
                    common_1.replaceAlias(`${facetTarget.targetString.split('@')[1].split('/')[0]}`, generateParameters.serviceAVT);
            const navigationProp = generateParameters.entityType.navigationProperties.find((prop) => {
                return prop.name === navPath;
            });
            const targetType = navigationProp.targetType;
            target = targetType.annotations.UI[visualizationKey.split(ux_specification_types_1.UIVOCABULARYDOT)[1]];
        }
    }
    if (facetTarget) {
        const visualizationType = visualizationKey.split(ux_specification_types_1.UIVOCABULARYDOT)[1];
        const namespace = facet.target[ux_specification_types_1.SchemaTag.fullyQualifiedName].split('@')[0];
        const fullVisualizationKey = navPath ? `${navPath}::${visualizationKey}` : visualizationKey;
        if (visualizationType.startsWith(ux_specification_types_1.Visualization.Chart)) {
            sections.properties[`${facetKey}<${visualizationKey}>`] = {
                $ref: common_1.getFacetDefinitionLink(ux_specification_types_1.DefinitionName.ObjectPageSectionChart, fullVisualizationKey)
            };
            const { sectionChart, chart } = handleSectionChart(facetTarget, fullVisualizationKey, appSchema, undefined, facet.entityType);
            sectionChart[ux_specification_types_1.SchemaTag.annotationPath] = facet.annotationPath;
            common_1.addTargetTitleAndSectionDescription(facet, sectionChart, facetKey);
            chart[ux_specification_types_1.SchemaTag.annotationPath] = `/${namespace}/${visualizationKey}`;
            chart[ux_specification_types_1.SchemaTag.target] = namespace;
        }
        else if (visualizationType.startsWith(ux_specification_types_1.Visualization.LineItem)) {
            sections.properties[`${facetKey}<${visualizationKey}>`] = {
                $ref: common_1.getFacetDefinitionLink(ux_specification_types_1.DefinitionName.ObjectPageSectionTableV4, fullVisualizationKey)
            };
            const { sectionTable, table } = handleSectionTable(facet, fullVisualizationKey, appSchema, { target, entityType: facet.entityType }, generateParameters, v4Page);
            sectionTable[ux_specification_types_1.SchemaTag.annotationPath] = facet.annotationPath;
            common_1.addTargetTitleAndSectionDescription(facet, sectionTable, facetKey);
            delete sectionTable[ux_specification_types_1.SchemaTag.isViewNode];
            table[ux_specification_types_1.SchemaTag.annotationPath] = `/${namespace}/${visualizationKey}`;
            table[ux_specification_types_1.SchemaTag.target] = namespace;
        }
    }
}
/**
 * Adds definitions for collections in object page sections to the app schema
 * @param {FacetConfig} facet - the given facet from the UI annotations
 * @param {string} facetKey - key of the facet, as used in annotation
 * @param {Definition} appSchema - app schema in general
 * @param {Definition} sections - schema of current sections definition.
 * @param {SectionType} sectionPrefix - prefix to distinguish Section and HeaderSection
 * @param {GenerateSchemaParameters} generateParameters - list of API input parameters
 * @param {SapUiAppPageV4} v4Page Current page in manifest
 */
function handleCollection(facet, facetKey, appSchema, sections, sectionPrefix, generateParameters, v4Page) {
    const collectionFacet = (sections.properties[facetKey] = common_1.createDefaultSection(appSchema, facet, facetKey));
    collectionFacet.properties = {
        subsections: {
            additionalProperties: false,
            type: 'object',
            properties: {},
            description: 'Subsections'
        }
    };
    const subSections = collectionFacet.properties.subsections;
    subSections[ux_specification_types_1.SchemaTag.annotationPath] = facet.annotationPath;
    subSections[ux_specification_types_1.SchemaTag.target] = facet.namespace;
    subSections[ux_specification_types_1.SchemaTag.keys] = [
        {
            name: ux_specification_types_1.SchemaKeyName.id,
            value: facet.ID
        }
    ];
    subSections[ux_specification_types_1.SchemaTag.isViewNode] = true;
    for (const key in facet.facets) {
        addSection(generateParameters, facet.facets, key, subSections, appSchema, sectionPrefix, v4Page);
    }
}
/**
 * Creates a section definition in app schema.
 * @param {GenerateSchemaParameters} generateParameters - list of API input parameters
 * @param {FacetConfigs} facets - list of all facets.
 * @param {string} facetKey - facet key.
 * @param {object} sections - schema of current sections definition.
 * @param {object} appSchema - app specific schema that potentially gets enhanced.
 * @param {SectionType} sectionPrefix - prefix to distinguish Section and HeaderSection
 * @param {SapUiAppPageV4} v4Page Current page in manifest
 */
function addSection(generateParameters, facets, facetKey, sections, appSchema, sectionPrefix, v4Page) {
    const facet = facets[facetKey];
    const facetDefinitionKey = `ObjectPage${sectionPrefix}${facet.base}<${common_1.getFacetKeyInSchema(facetKey)}>`;
    switch (facet.base) {
        case ux_specification_types_1.FacetBase.PresentationVariant: {
            handleSectionPresentationVariant(facet, facetKey, appSchema, sections, generateParameters, v4Page);
            break;
        }
        case ux_specification_types_1.FacetBase.CollectionFacet: {
            handleCollection(facet, facetKey, appSchema, sections, sectionPrefix, generateParameters, v4Page);
            break;
        }
        case ux_specification_types_1.FacetBase.LineItem: {
            if (sectionPrefix === ux_specification_types_1.SectionType.Section) {
                const lineItemFacet = facets[facetKey];
                handleSectionTable(facet, facetKey, appSchema, lineItemFacet, generateParameters, v4Page, sections);
            }
            break;
        }
        case ux_specification_types_1.FacetBase.Form:
        case ux_specification_types_1.FacetBase.Identification: {
            handleFormIdentification(facet, v4Page, facetKey, sections, appSchema, sectionPrefix, generateParameters.logger);
            break;
        }
        case ux_specification_types_1.FacetBase.DataPoint: {
            handleHeaderFacet(facet, facetKey, sections, appSchema, facetDefinitionKey);
            break;
        }
        case ux_specification_types_1.FacetBase.Chart: {
            if (sectionPrefix === ux_specification_types_1.SectionType.HeaderSection) {
                handleHeaderFacet(facet, facetKey, sections, appSchema, facetDefinitionKey);
            }
            else if (sectionPrefix === ux_specification_types_1.SectionType.Section) {
                handleSectionChart(facet, facetKey, appSchema, sections);
            }
            break;
        }
        case ux_specification_types_1.FacetBase.Address:
        case ux_specification_types_1.FacetBase.Contact: {
            common_1.handleAddressContact(facet, facetKey, sections, appSchema, sectionPrefix);
            break;
        }
        default: {
            sections['properties'][facetKey] = common_1.createDefaultSection(appSchema, facet, facetKey);
        }
    }
}
/**
 * Derives the sections from the UI.Facets annotation and adds them to the schema
 * @param {GenerateAppSchemaParameters} generateParameters - list of API input parameters
 * @param {object} appSchema - application specific JSON schema
 * @param {SapUiAppPageV4} v4Page - current page
 */
function addSections(generateParameters, appSchema, v4Page) {
    // Get facet annotations
    const facets = common_1.getObjectPageFacets(generateParameters.entityType, generateParameters.serviceAVT, ux_specification_types_1.FioriElementsVersion.v4, generateParameters.logger);
    if (!facets) {
        delete appSchema.definitions[ux_specification_types_1.DefinitionName.ObjectPageSubSections];
        return;
    }
    const sections = appSchema.definitions[ux_specification_types_1.DefinitionName.Sections];
    for (const facetKey in facets) {
        addSection(generateParameters, facets, facetKey, sections, appSchema, ux_specification_types_1.SectionType.Section, v4Page);
    }
    // Custom sections as part of sections
    if (appSchema.definitions[ux_specification_types_1.DefinitionName.CustomSections]) {
        sections.properties = {
            ...sections.properties,
            ...appSchema.definitions[ux_specification_types_1.DefinitionName.CustomSections].properties
        };
    }
}
/**
 * Derives the header sections from the UI.HeaderFacets annotation and adds them to the schema
 * @param {GenerateAppSchemaParameters} generateParameters - list of API input parameters
 * @param {object} appSchema - application specific JSON schema
 * @param {EntityType} entityType - current entity type
 * @param {SapUiAppPageV4} v4Page - current page in manifest
 */
function addHeaderSections(generateParameters, appSchema, entityType, v4Page) {
    // Get facet annotations
    const facets = common_1.getObjectPageHeaderFacets(entityType, generateParameters.serviceAVT, ux_specification_types_1.FioriElementsVersion.v4, generateParameters.logger);
    const sections = appSchema.definitions[ux_specification_types_1.DefinitionName.HeaderSections];
    sections.properties = {};
    sections.additionalProperties = false;
    if (!facets) {
        return;
    }
    for (const facetKey in facets) {
        addSection(generateParameters, facets, facetKey, sections, appSchema, ux_specification_types_1.SectionType.HeaderSection, v4Page);
    }
    //delete generic definitions
    delete appSchema.definitions[ux_specification_types_1.DefinitionName.ObjectPageHeaderSectionForm];
    delete appSchema.definitions[ux_specification_types_1.DefinitionName.ObjectPageHeaderSectionChart];
    delete appSchema.definitions[ux_specification_types_1.DefinitionName.ObjectPageHeaderSectionDataPoint];
    delete appSchema.definitions[ux_specification_types_1.DefinitionName.ObjectPageHeaderSectionContact];
    delete appSchema.definitions[ux_specification_types_1.DefinitionName.ObjectPageHeaderSectionAddress];
}
/**
 * Adds the related facets keys 'enum' to the app schema
 * @param {GenerateAppSchemaParameters} generateParameters - list of API input parameters
 * @param {object} schema - app specific schema that potentially gets enhanced
 * @param {SapUiAppPageV4[]} pages - list of all pages
 * @param {string} contextPath - contextPath of the actual (object) page
 */
function addRelatedFacetKeysType(generateParameters, schema, pages, contextPath) {
    Object.keys(pages).forEach((element) => {
        if (pages[element].options &&
            pages[element].options.settings &&
            (pages[element].options.settings.entitySet === generateParameters?.entitySet?.name ||
                (contextPath && pages[element].options.settings.contextPath === contextPath)) &&
            pages[element].name === ux_specification_types_1.v4.FE_TEMPLATE_V4_OBJECT_PAGE) {
            // Find sections from annotation
            const facetSections = common_1.getObjectPageFacetSection(generateParameters.entityType, generateParameters.serviceAVT, generateParameters.logger);
            // Find custom sections ids from manifest
            const page = pages[element];
            if (page.options &&
                page.options.settings &&
                page.options.settings.content &&
                page.options.settings.content.body &&
                page.options.settings.content.body.sections) {
                Object.keys(page.options.settings.content.body.sections).forEach(function (key) {
                    // Just in case - avoid duplications
                    if (!facetSections.find((section) => section.key === key)) {
                        facetSections.push({
                            key,
                            custom: true
                        });
                    }
                });
            }
            // Update schema definition
            common_1.addDefinitionForRelatedFacetKeys(schema, [ux_specification_types_1.DefinitionName.ObjectPageCustomSectionFragment], facetSections, [
                'ID',
                'label',
                'key'
            ]);
        }
    });
}
/**
 * Add Object Page Header to app-specific schema
 * @param {GenerateAppSchemaParameters} generateParameters - list of API input parameters
 * @param {Definition} appSchema Schema of the app
 * @param {SapUiAppPageV4} v4Page - current page in manifest
 */
function addHeader(generateParameters, appSchema, v4Page) {
    const entityType = generateParameters.entityType;
    common_1.addCommonHeaderSchema(appSchema, entityType);
    // Add header actions
    common_1.addHeaderActions(appSchema, entityType, generateParameters.serviceAVT, addHeaderActionCallBackV4);
    // Add custom header actions
    addHeaderFooterCustomActionsOP(appSchema, v4Page, ux_specification_types_1.DefinitionName.CustomHeaderActionOP, generateParameters.logger);
    // Add header sections
    appSchema.definitions[ux_specification_types_1.DefinitionName.HeaderSections][ux_specification_types_1.SchemaTag.annotationPath] = `/${entityType.fullyQualifiedName}/@${"com.sap.vocabularies.UI.v1.HeaderFacets" /* HeaderFacets */}`;
    addHeaderSections(generateParameters, appSchema, entityType, v4Page);
}
/**
 * Generates an app specific schema out of the generic schema.
 * Generic types are replaced by information from the app specific annotations.
 * @param {GenerateAppSchemaParameters} generateParameters - list of API input parameters
 * @param genericSchema  - generic JSON schema of an object page
 * @param contextPath - contextPath of the given page
 *
 * @returns the app specific JSON schema
 */
function generateObjectPageSchemaV4(generateParameters, genericSchema, contextPath) {
    const appSchema = JSON.parse(JSON.stringify(genericSchema));
    // Change reference to generated sections
    appSchema.properties.sections = {
        $ref: `${common_1.DEFINITION_LINK_PREFIX}${ux_specification_types_1.DefinitionName.Sections}`
    };
    if (!generateParameters.manifest[ux_specification_types_1.ManifestSection.ui5].routing ||
        !generateParameters.manifest[ux_specification_types_1.ManifestSection.ui5].routing.targets) {
        extensionLogger_1.log(generateParameters.logger, {
            severity: "error" /* Error */,
            message: i18next_1.default.t('NOROUTING'),
            location: {
                path: ux_specification_types_1.MANIFESTPATH
            }
        });
        return appSchema;
    }
    //initialize sections
    const sections = (appSchema.definitions[ux_specification_types_1.DefinitionName.Sections] = {
        type: 'object',
        properties: {},
        additionalProperties: false,
        description: ux_specification_types_1.DefinitionName.Sections
    });
    sections[ux_specification_types_1.SchemaTag.isViewNode] = true;
    if (generateParameters.entityType) {
        const pages = generateParameters.manifest[ux_specification_types_1.ManifestSection.ui5].routing
            .targets;
        if (!pages) {
            extensionLogger_1.log(generateParameters.logger, {
                severity: "error" /* Error */,
                message: i18next_1.default.t('NOPAGES', { appId: generateParameters.manifest['sap.app']['id'] }),
                location: {
                    path: ux_specification_types_1.MANIFESTPATH,
                    range: [ux_specification_types_1.ManifestSection.generic]
                }
            });
            return appSchema;
        }
        const v4Page = utils_2.findPageV4(pages, ux_specification_types_1.v4.FE_TEMPLATE_V4_OBJECT_PAGE, generateParameters.entitySet, contextPath, generateParameters.logger);
        if (!v4Page) {
            return appSchema;
        }
        // Add Header
        addHeader(generateParameters, appSchema, v4Page);
        // Add sections
        sections[ux_specification_types_1.SchemaTag.isViewNode] = true;
        sections[ux_specification_types_1.SchemaTag.annotationPath] = `/${generateParameters.entityType.fullyQualifiedName}/@${"com.sap.vocabularies.UI.v1.Facets" /* Facets */}`;
        addSections(generateParameters, appSchema, v4Page);
        // Custom Section facets
        addRelatedFacetKeysType(generateParameters, appSchema, pages, contextPath);
        // Add Footer (actions only)
        common_1.addFooterActions(appSchema, generateParameters, ux_specification_types_1.FioriElementsVersion.v4, addFooterActionCallBackV4);
        addHeaderFooterCustomActionsOP(appSchema, v4Page, ux_specification_types_1.DefinitionName.CustomFooterActionOP, generateParameters.logger);
    }
    // Delete generic definitions from schema
    delete appSchema.definitions[ux_specification_types_1.DefinitionName.CommonHeaderFacetSettings];
    delete appSchema.definitions[ux_specification_types_1.DefinitionName.GenericColumnsOP];
    delete appSchema.definitions[ux_specification_types_1.DefinitionName.GenericSections];
    delete appSchema.definitions[ux_specification_types_1.DefinitionName.ObjectPageChart];
    delete appSchema.definitions[ux_specification_types_1.DefinitionName.ObjectPageSectionAddress];
    delete appSchema.definitions[ux_specification_types_1.DefinitionName.ObjectPageSectionChart];
    delete appSchema.definitions[ux_specification_types_1.DefinitionName.ObjectPageSectionContact];
    delete appSchema.definitions[ux_specification_types_1.DefinitionName.ObjectPageSectionDataPoint];
    delete appSchema.definitions[ux_specification_types_1.DefinitionName.ObjectPageSectionForm];
    delete appSchema.definitions[ux_specification_types_1.DefinitionName.ObjectPageSectionTableV4];
    delete appSchema.definitions[ux_specification_types_1.DefinitionName.ObjectPageSectionPresentationVariant];
    delete appSchema.definitions[ux_specification_types_1.DefinitionName.ObjectPageSubSections];
    delete appSchema.definitions[ux_specification_types_1.DefinitionName.ObjectPageTable];
    delete appSchema.definitions[ux_specification_types_1.DefinitionName.ObjectPageToolBar];
    delete appSchema.definitions[ux_specification_types_1.DefinitionName.ObjectPageToolBarAction];
    delete appSchema.definitions[ux_specification_types_1.DefinitionName.ObjectPageToolBarActions];
    delete appSchema.definitions[ux_specification_types_1.DefinitionName.QuickVariantSelectionV4OP];
    common_1.updatePropertyIndices(appSchema, ROOT_PROPERTIES_ORDER);
    return appSchema;
}
exports.generateObjectPageSchemaV4 = generateObjectPageSchemaV4;
//# sourceMappingURL=objectPage.js.map