import type { LineItem } from '@sap-ux/vocabularies-types/vocabularies/UI';
import type { AnnotationTerm, ConvertedMetadata, EntitySet, EntityType } from '@sap-ux/vocabularies-types';
import type { Definition } from 'typescript-json-schema';
import type { ExtensionLogger, GenerateAppSchemaParameters, FileData, Manifest } from '@sap/ux-specification-types';
import { v4, DefinitionName } from '@sap/ux-specification-types';
import type { CustomPageCustomViewData } from '../types';
export declare type CustomExtension = v4.TableCustomColumn | v4.CustomAction;
export interface CustomExtensions {
    [key: string]: CustomExtension;
}
/**
 * Adds extension at the right position of the sorted array of annotation-based nodes
 * @param extensions - list of extensions in manifest
 * @param sortedExtensionsArray - sorted array of annotation-based nodes, to be enhanced by extensions
 * @param extensionDefinitionName - extension definition name, different in LR and OP
 * @param loggeloggerr - logger for error messages
 */
export declare function addExtensionToArray(extensions: CustomExtensions, sortedExtensionsArray: [string, unknown][], extensionDefinitionName: string, templatePropertyName?: string, logger?: ExtensionLogger): [string, unknown][];
/**
 * Common function for enhancing the LineItems definition of app schema by custom columns
 * @param appSchema - app-specific JSON schema
 * @param v4Page - actual page in the manifest
 * @param logger - logger for error messages
 * @param customColumnDefinitionName - custom column definition name
 * @param sectionId - identifier of the current object page section in schema
 * @param sectionIdInManifest - identifier of the current object page section in manifest
 */
export declare function addCustomColumnDefinition(appSchema: Definition, v4Page: v4.SapUiAppPageV4, logger: ExtensionLogger, customColumnDefinitionName?: string, sectionId?: string, sectionIdInManifest?: string): void;
export declare type LineItemDataForSchema = {
    appSchema: Definition;
    lineItemAnnotation: AnnotationTerm<LineItem>;
    entityType: EntityType;
    oDataServiceAVT: ConvertedMetadata;
    lineItemId: string;
};
/**
 * Adds the line item definition, columns and actions to the app schema (for the list report or an object page section comprising a table)
 * @param {LineItemDataForSchema} data: structure comprising
 * - appSchema - the app specific schema that shall get enhanced
 * - lineItemAnnotation - the UI.LineItem annotation, comprising all records
 * - entityType - the entity type as part of the AVT ConvertedMetadata
 * - oDataServiceAVT - complete service information, as returned by Annotation Vocabularies Tool
 * - lineItemId - in case of OP the parameter must be passed to distinguish the OP tables;
 *                in case of LR or ALP 'LineItems' is passed.
 * @param columnDefinitionName - name of the column definition, i.e. TableColumn or ObjectPageTableColumn
 * @param customColumnDefinitionName - name of the custom column definition
 */
export declare function addLineItemsTypeToSchema(data: LineItemDataForSchema, columnDefinitionName?: string, customColumnDefinitionName?: string, customActionDefinitionName?: string): void;
/**
 * Adds an enum or value help to position > anchor of custom column
 * @param appSchema - app specific JSON schema
 * @param lineItemId - ID of the current line item in schema
 * @param v4Page - current page in manifest
 * @param positionName - ID of the definition of custom column position in schema
 * @param sectionIdInManifest - identifier of the current object page section in manifest
 */
export declare function addFragmentEnumForAnchor(appSchema: Definition, lineItemId: string, v4Page: v4.SapUiAppPageV4, positionName?: string, sectionIdInManifest?: string): void;
/**
 * Adds an enum or value help to position > anchor of custom column
 * @param appSchema - app specific JSON schema
 * @param definitionId - definition key of actions
 * @param positionName - target definition to update
 */
export declare function addEnumForActionAnchor(appSchema: Definition, definitionId: string, positionName?: string): void;
/**
 * Find the relevant V4 page under the routing targets of manifest,json
 * @param pages - list of all pages in manifest
 * @param pageName - search criterion: page name
 * @param entitySet - search criterion: entity set object from AVT
 * @param contextPath - search criterion: contextPath
 * @param logger - logger for messages
 * @returns the page definition in manifest (if found)
 */
export declare function findPageV4(pages: v4.SapUiAppPageV4[], pageName: string, entitySet: EntitySet, contextPath: string, logger: ExtensionLogger): v4.SapUiAppPageV4 | undefined;
/**
 * Depending on the template type, strip down the app schema so that only the relevant views are part of it
 * @param {Definition} appSchema - app specific JSON schema, to be adjusted
 * @param {GenerateAppSchemaParameters} generateParameters - object comprising all input parameters
 * @returns the right definition name for the table in the schema
 */
export declare function alignSchemaWithTemplateType(appSchema: Definition, generateParameters: GenerateAppSchemaParameters): DefinitionName.Table | DefinitionName.ALPTableView;
/**
 * Common function for enhancing LineItems and FieldGroups definitions of app schema by custom action definitions
 * @param appSchema - app-specific JSON schema
 * @param v4Page - actual page in the manifest
 * @param logger - logger for error messages
 * @param customActionDefinitionName - definition name of custom action
 * @param sectionId - identifier of the current object page section in schema
 * @param sectionIdInManifest - identifier of the current object page section in manifest
 */
export declare function addCustomActionDefinition(appSchema: Definition, v4Page: v4.SapUiAppPageV4, logger: ExtensionLogger, customActionDefinitionName?: string, sectionId?: string, sectionIdInManifest?: string): void;
/**
 * Common function for enhancing header and footer definitions of app schema by custom action definitions
 * @param appSchema - app-specific JSON schema
 * @param v4Page - actual page in the manifest
 * @param logger - logger for error messages
 * @param customActionDefinitionName - definition name of custom action
 * @param sectionId - identifier of the current object page section in schema
 */
export declare function addHeaderFooterCustomActionDefinition(appSchema: Definition, v4Page: v4.SapUiAppPageV4, logger: ExtensionLogger, customActionDefinitionName?: DefinitionName, sectionId?: string): void;
/**
 * Method finds view XML file for passed page.
 * @param {FileData[]} files All view files.
 * @param {string} pageId Page id.
 * @param {Manifest} manifest Object from manifest.json.
 * @param {ExtensionLogger} [logger] Logger.
 * @returns {CustomPageCustomViewData | undefined} Custom page's data containing view XML file.
 */
export declare function getPageCustomViewFile(files: FileData[], pageId: string, manifest: Manifest, logger?: ExtensionLogger): CustomPageCustomViewData | undefined;
//# sourceMappingURL=utils.d.ts.map